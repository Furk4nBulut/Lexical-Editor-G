<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/Editor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/Editor.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import {&#10;  PaginationPlugin,&#10;  DEFAULT_PAGINATION_SETTINGS,&#10;  type PaginationSettings&#10;} from './plugins/pagination/PaginationPlugin';&#10;import { PageBreakNode } from './plugins/pagination/PageBreakNode';&#10;import { WordCountPlugin } from './WordCountPlugin';&#10;import './styles.css';&#10;&#10;const theme = {&#10;  text: {&#10;    bold: 'editor-bold',&#10;    italic: 'editor-italic',&#10;    underline: 'editor-underline'&#10;  }&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;export default function Editor(): JSX.Element {&#10;  const [pageCount, setPageCount] = React.useState(1);&#10;  const paginationSettings: PaginationSettings = DEFAULT_PAGINATION_SETTINGS;&#10;&#10;  const handlePageCountChange = React.useCallback((count: number) =&gt; {&#10;    setPageCount(count);&#10;  }, []);&#10;&#10;  const initialConfig = {&#10;    namespace: 'SimpleEditor',&#10;    theme,&#10;    onError,&#10;    nodes: [PageBreakNode]&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-container paginated&quot;&gt;&#10;      &lt;div className=&quot;page-indicator&quot;&gt;Page {pageCount}&lt;/div&gt;&#10;      &lt;div&#10;        className=&quot;a4-page&quot;&#10;        style={{&#10;          width: `${paginationSettings.pageWidth}mm`,&#10;          minHeight: `${paginationSettings.pageHeight}mm`,&#10;          margin: `${paginationSettings.marginTop}mm ${paginationSettings.marginRight}mm ${paginationSettings.marginBottom}mm ${paginationSettings.marginLeft}mm`&#10;        }}&#10;      &gt;&#10;        &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;          &lt;RichTextPlugin&#10;            contentEditable={&lt;ContentEditable className=&quot;contentEditable&quot; /&gt;}&#10;            placeholder={&lt;div className=&quot;placeholder&quot;&gt;Start typing...&lt;/div&gt;}&#10;            ErrorBoundary={LexicalErrorBoundary}&#10;          /&gt;&#10;          &lt;HistoryPlugin /&gt;&#10;          &lt;PaginationPlugin&#10;            settings={paginationSettings}&#10;            onPageCountChange={handlePageCountChange}&#10;          /&gt;&#10;          &lt;WordCountPlugin onWordCountChange={/* pass prop from parent */} /&gt;&#10;        &lt;/LexicalComposer&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import {&#10;  PaginationPlugin,&#10;  DEFAULT_PAGINATION_SETTINGS,&#10;  type PaginationSettings&#10;} from './plugins/pagination/PaginationPlugin';&#10;import { PageBreakNode } from './plugins/pagination/PageBreakNode';&#10;import { WordCountPlugin } from './WordCountPlugin';&#10;import './styles.css';&#10;&#10;const theme = {&#10;  text: {&#10;    bold: 'editor-bold',&#10;    italic: 'editor-italic',&#10;    underline: 'editor-underline'&#10;  }&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;export default function Editor({ onWordCountChange }: { onWordCountChange?: (words: number, chars: number) =&gt; void }): JSX.Element {&#10;  const [pageCount, setPageCount] = React.useState(1);&#10;  const paginationSettings: PaginationSettings = DEFAULT_PAGINATION_SETTINGS;&#10;&#10;  const handlePageCountChange = React.useCallback((count: number) =&gt; {&#10;    setPageCount(count);&#10;  }, []);&#10;&#10;  const initialConfig = {&#10;    namespace: 'SimpleEditor',&#10;    theme,&#10;    onError,&#10;    nodes: [PageBreakNode]&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-container paginated&quot;&gt;&#10;      &lt;div className=&quot;page-indicator&quot;&gt;Page {pageCount}&lt;/div&gt;&#10;      &lt;div&#10;        className=&quot;a4-page&quot;&#10;        style={{&#10;          width: `${paginationSettings.pageWidth}mm`,&#10;          minHeight: `${paginationSettings.pageHeight}mm`,&#10;          margin: `${paginationSettings.marginTop}mm ${paginationSettings.marginRight}mm ${paginationSettings.marginBottom}mm ${paginationSettings.marginLeft}mm`&#10;        }}&#10;      &gt;&#10;        &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;          &lt;RichTextPlugin&#10;            contentEditable={&lt;ContentEditable className=&quot;contentEditable&quot; /&gt;}&#10;            placeholder={&lt;div className=&quot;placeholder&quot;&gt;Start typing...&lt;/div&gt;}&#10;            ErrorBoundary={LexicalErrorBoundary}&#10;          /&gt;&#10;          &lt;HistoryPlugin /&gt;&#10;          &lt;PaginationPlugin&#10;            settings={paginationSettings}&#10;            onPageCountChange={handlePageCountChange}&#10;          /&gt;&#10;          &lt;WordCountPlugin onWordCountChange={onWordCountChange} /&gt;&#10;        &lt;/LexicalComposer&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/WordCountPlugin.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/WordCountPlugin.tsx" />
              <option name="updatedContent" value="import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { useEffect } from 'react';&#10;import { $getRoot } from 'lexical';&#10;&#10;export function WordCountPlugin({&#10;  onWordCountChange&#10;}: {&#10;  onWordCountChange?: (words: number, chars: number) =&gt; void;&#10;}): null {&#10;  const [editor] = useLexicalComposerContext();&#10;&#10;  useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(() =&gt; {&#10;      editor.getEditorState().read(() =&gt; {&#10;        const text = $getRoot().getTextContent();&#10;        const words = text.trim().split(/\s+/).filter((word) =&gt; word.length &gt; 0).length;&#10;        const chars = text.length;&#10;        onWordCountChange?.(words, chars);&#10;      });&#10;    });&#10;  }, [editor, onWordCountChange]);&#10;&#10;  return null;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/plugins/pagination/PaginationSettingsPanel.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/plugins/pagination/PaginationSettingsPanel.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import type { PaginationSettings } from './PaginationPlugin';&#10;&#10;interface PaginationSettingsProps {&#10;  settings: PaginationSettings;&#10;  onSettingsChange: (settings: PaginationSettings) =&gt; void;&#10;  isVisible: boolean;&#10;  onToggle: () =&gt; void;&#10;}&#10;&#10;export function PaginationSettingsPanel({&#10;  settings,&#10;  onSettingsChange,&#10;  isVisible,&#10;  onToggle&#10;}: PaginationSettingsProps): JSX.Element {&#10;  const [localSettings, setLocalSettings] = useState(settings);&#10;&#10;  const handleChange = (field: keyof PaginationSettings, value: number): void =&gt; {&#10;    const newSettings = { ...localSettings, [field]: value };&#10;    setLocalSettings(newSettings);&#10;    onSettingsChange(newSettings);&#10;  };&#10;&#10;  const presets = {&#10;    A4: { pageWidth: 210, pageHeight: 297 },&#10;    A3: { pageWidth: 297, pageHeight: 420 },&#10;    Letter: { pageWidth: 216, pageHeight: 279 },&#10;    Legal: { pageWidth: 216, pageHeight: 356 }&#10;  };&#10;&#10;  const applyPreset = (preset: keyof typeof presets): void =&gt; {&#10;    const newSettings = {&#10;      ...localSettings,&#10;      ...presets[preset]&#10;    };&#10;    setLocalSettings(newSettings);&#10;    onSettingsChange(newSettings);&#10;  };&#10;&#10;  if (!isVisible) {&#10;    return (&#10;      &lt;button className=&quot;pagination-control-btn settings-toggle&quot; onClick={onToggle}&gt;&#10;        ⚙️&#10;      &lt;/button&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;page-settings&quot;&gt;&#10;      &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;&#10;        &lt;h3&gt;Sayfa Ayarları&lt;/h3&gt;&#10;        &lt;button&#10;          onClick={onToggle}&#10;          style={{&#10;            background: 'none',&#10;            border: 'none',&#10;            cursor: 'pointer',&#10;            fontSize: '16px'&#10;          }}&#10;        &gt;&#10;          ✕&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div style={{ marginBottom: '12px' }}&gt;&#10;        &lt;label&gt;Sayfa Boyutu Önayarları:&lt;/label&gt;&#10;        &lt;div style={{ display: 'flex', gap: '4px', marginTop: '4px' }}&gt;&#10;          {Object.keys(presets).map((preset) =&gt; (&#10;            &lt;button&#10;              key={preset}&#10;              onClick={() =&gt; {&#10;                applyPreset(preset as keyof typeof presets);&#10;              }}&#10;              style={{&#10;                padding: '4px 8px',&#10;                border: '1px solid #d1d1d1',&#10;                borderRadius: '2px',&#10;                background: 'white',&#10;                cursor: 'pointer',&#10;                fontSize: '10px'&#10;              }}&#10;            &gt;&#10;              {preset}&#10;            &lt;/button&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;label&gt;&#10;        Genişlik (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.pageWidth}&#10;          onChange={(e) =&gt; {&#10;            handleChange('pageWidth', Number(e.target.value));&#10;          }}&#10;          min=&quot;100&quot;&#10;          max=&quot;500&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Yükseklik (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.pageHeight}&#10;          onChange={(e) =&gt; {&#10;            handleChange('pageHeight', Number(e.target.value));&#10;          }}&#10;          min=&quot;100&quot;&#10;          max=&quot;700&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Üst Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginTop}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginTop', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Alt Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginBottom}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginBottom', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Sol Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginLeft}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginLeft', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Sağ Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginRight}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginRight', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;div style={{ marginTop: '12px', fontSize: '10px', color: '#666' }}&gt;&#10;        Ctrl+Enter: Yeni sayfa ekle&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="export interface PaginationSettings {&#10;  pageHeight: number; // mm&#10;  pageWidth: number; // mm&#10;  marginTop: number; // mm&#10;  marginBottom: number; // mm&#10;  marginLeft: number; // mm&#10;  marginRight: number; // mm&#10;}&#10;&#10;export const DEFAULT_PAGINATION_SETTINGS: PaginationSettings = {&#10;  pageHeight: 297, // A4 height&#10;  pageWidth: 210,  // A4 width&#10;  marginTop: 25,&#10;  marginBottom: 25,&#10;  marginLeft: 20,&#10;  marginRight: 20&#10;};&#10;&#10;export const PAGINATION_PRESETS: Record&lt;string, Partial&lt;PaginationSettings&gt;&gt; = {&#10;  A4: { pageWidth: 210, pageHeight: 297 },&#10;  A3: { pageWidth: 297, pageHeight: 420 },&#10;  Letter: { pageWidth: 216, pageHeight: 279 },&#10;  Legal: { pageWidth: 216, pageHeight: 356 }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/index.ts" />
              <option name="originalContent" value="import GlyfEditor from './glyf-editor/Editor';&#10;&#10;export { GlyfEditor };&#10;" />
              <option name="updatedContent" value="const GlyfEditor = require('./glyf-editor/Editor').default;&#10;&#10;export { GlyfEditor };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/playground/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/playground/App.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import './App.css';&#10;import { GlyfEditor } from 'src/components';&#10;&#10;function App(): JSX.Element {&#10;  const [wordCount, setWordCount] = React.useState(0);&#10;  const [charCount, setCharCount] = React.useState(0);&#10;  const [isLoading, setIsLoading] = React.useState(true);&#10;&#10;  React.useEffect(() =&gt; {&#10;    // Simüle loading sürecini&#10;    const timer = setTimeout(() =&gt; {&#10;      setIsLoading(false);&#10;    }, 500);&#10;    return () =&gt; {&#10;      clearTimeout(timer);&#10;    };&#10;  }, []);&#10;&#10;  const handleWordCountChange = React.useCallback((words: number, chars: number) =&gt; {&#10;    setWordCount(words);&#10;    setCharCount(chars);&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;App&quot;&gt;&#10;        &lt;div className=&quot;editorLoading&quot;&gt;Editör yükleniyor...&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;App&quot;&gt;&#10;      &lt;header&gt;&#10;        &lt;h1 className=&quot;editorHeading&quot;&gt;Glyf Editor - Microsoft Word Benzeri Deneyim&lt;/h1&gt;&#10;      &lt;/header&gt;&#10;&#10;      &lt;main className=&quot;editorWrapper&quot;&gt;&#10;        &lt;GlyfEditor onWordCountChange={handleWordCountChange} /&gt;&#10;      &lt;/main&gt;&#10;&#10;      &lt;footer className=&quot;editorStatusBar&quot;&gt;&#10;        &lt;div className=&quot;statusBarLeft&quot;&gt;&#10;          &lt;span&gt;Sayfa 1 / 1&lt;/span&gt;&#10;          &lt;span&gt;Kelime: {wordCount}&lt;/span&gt;&#10;          &lt;span&gt;Karakter: {charCount}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;statusBarRight&quot;&gt;&#10;          &lt;span&gt;Türkçe (Türkiye)&lt;/span&gt;&#10;          &lt;span&gt;100%&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/footer&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import './App.css';&#10;import { GlyfEditor } from 'src/components';&#10;&#10;function App(): JSX.Element {&#10;  const [wordCount, setWordCount] = React.useState(0);&#10;  const [charCount, setCharCount] = React.useState(0);&#10;  const [isLoading, setIsLoading] = React.useState(true);&#10;&#10;  React.useEffect(() =&gt; {&#10;    // Simüle loading sürecini&#10;    const timer = setTimeout(() =&gt; {&#10;      setIsLoading(false);&#10;    }, 500);&#10;    return () =&gt; {&#10;      clearTimeout(timer);&#10;    };&#10;  }, []);&#10;&#10;  const handleWordCountChange = React.useCallback((words: number, chars: number) =&gt; {&#10;    setWordCount(words);&#10;    setCharCount(chars);&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;App&quot;&gt;&#10;        &lt;div className=&quot;editorLoading&quot;&gt;Editör yükleniyor...&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;App&quot;&gt;&#10;      &lt;header&gt;&#10;        &lt;h1 className=&quot;editorHeading&quot;&gt;Glyf Editor - Microsoft Word Benzeri Deneyim&lt;/h1&gt;&#10;      &lt;/header&gt;&#10;&#10;      &lt;main className=&quot;editorWrapper&quot;&gt;&#10;        &lt;GlyfEditor onWordCountChange={handleWordCountChange} /&gt;&#10;      &lt;/main&gt;&#10;&#10;      &lt;footer className=&quot;editorStatusBar&quot;&gt;&#10;        &lt;div className=&quot;statusBarLeft&quot;&gt;&#10;          &lt;span&gt;Sayfa 1 / 1&lt;/span&gt;&#10;          &lt;span&gt;Kelime: {wordCount}&lt;/span&gt;&#10;          &lt;span&gt;Karakter: {charCount}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;statusBarRight&quot;&gt;&#10;          &lt;span&gt;Türkçe (Türkiye)&lt;/span&gt;&#10;          &lt;span&gt;100%&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;statusBarDebug&quot;&gt;&#10;          &lt;span&gt;kayblound wordocunt: {wordCount}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/footer&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>