<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/editor/EditModeContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/EditModeContext.tsx" />
              <option name="originalContent" value="import React, { createContext, useContext, useMemo } from 'react';&#10;&#10;export interface EditModeContextValue {&#10;  headerFooterEditMode: boolean;&#10;}&#10;&#10;const EditModeContext = createContext&lt;EditModeContextValue&gt;({ headerFooterEditMode: false });&#10;&#10;export function useEditModeContext(): EditModeContextValue {&#10;  return useContext(EditModeContext);&#10;}&#10;&#10;export function EditModeProvider({&#10;  value,&#10;  children&#10;}: {&#10;  value: EditModeContextValue;&#10;  children: React.ReactNode;&#10;}): JSX.Element {&#10;  const memo = useMemo(() =&gt; value, [value.headerFooterEditMode]);&#10;  return &lt;EditModeContext.Provider value={memo}&gt;{children}&lt;/EditModeContext.Provider&gt;;&#10;}&#10;" />
              <option name="updatedContent" value="import React, { createContext, useContext, useMemo } from 'react';&#10;&#10;export interface EditModeContextValue {&#10;  headerFooterEditMode: boolean;&#10;  setHeaderFooterEditMode?: (value: boolean) =&gt; void;&#10;}&#10;&#10;const EditModeContext = createContext&lt;EditModeContextValue&gt;({ headerFooterEditMode: false });&#10;&#10;export function useEditModeContext(): EditModeContextValue {&#10;  return useContext(EditModeContext);&#10;}&#10;&#10;export function EditModeProvider({&#10;  value,&#10;  children&#10;}: {&#10;  value: EditModeContextValue;&#10;  children: React.ReactNode;&#10;}): JSX.Element {&#10;  const memo = useMemo(() =&gt; value, [value.headerFooterEditMode, value.setHeaderFooterEditMode]);&#10;  return &lt;EditModeContext.Provider value={memo}&gt;{children}&lt;/EditModeContext.Provider&gt;;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/editor/Editor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/Editor.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import { ToolbarPlugin } from '../toolbar/Toolbar';&#10;import './styles.css';&#10;import { editorNodes } from './nodes';&#10;import { PageInitializerPlugin } from './plugins/PageInitializerPlugin';&#10;import { EditModeProvider } from './EditModeContext';&#10;import { ContentSelectAllPlugin } from './plugins/ContentSelectAllPlugin';&#10;import { PageAutoSplitPlugin } from './plugins/PageAutoSplitPlugin';&#10;import PageContentFlowPlugin from './plugins/PageContentFlowPlugin';&#10;import PageContentEditable from './PageContentEditable';&#10;&#10;const theme = {&#10;  text: {&#10;    bold: 'editor-bold',&#10;    italic: 'editor-italic',&#10;    underline: 'editor-underline'&#10;  }&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;function initialEditorState(): void {&#10;  // Initial state handled by PageInitializerPlugin&#10;}&#10;&#10;export default function Editor(): JSX.Element {&#10;  const [headerFooterEditMode, setHeaderFooterEditMode] = React.useState(false);&#10;  const initialConfig = {&#10;    namespace: 'SimpleEditor',&#10;    theme,&#10;    onError,&#10;    editorState: initialEditorState,&#10;    nodes: editorNodes&#10;  } as const;&#10;&#10;  // EditModeContext'i hem değer hem setter ile sağlayalım&#10;  const editModeContextValue = React.useMemo(&#10;    () =&gt; ({ headerFooterEditMode, setHeaderFooterEditMode }),&#10;    [headerFooterEditMode]&#10;  );&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-a4-wrapper&quot;&gt;&#10;      &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;        &lt;EditModeProvider value={editModeContextValue}&gt;&#10;          &lt;ToolbarPlugin&#10;            headerFooterEditMode={headerFooterEditMode}&#10;            setHeaderFooterEditMode={setHeaderFooterEditMode}&#10;          /&gt;&#10;          &lt;RichTextPlugin&#10;            contentEditable={&lt;PageContentEditable /&gt;}&#10;            placeholder={&lt;div className=&quot;editor-placeholder&quot;&gt;Start typing...&lt;/div&gt;}&#10;            ErrorBoundary={LexicalErrorBoundary}&#10;          /&gt;&#10;          &lt;PageInitializerPlugin /&gt;&#10;          &lt;HistoryPlugin /&gt;&#10;          &lt;ContentSelectAllPlugin /&gt;&#10;          &lt;PageAutoSplitPlugin pageHeightMm={297} marginTopMm={20} marginBottomMm={20} /&gt;&#10;          &lt;PageContentFlowPlugin /&gt;&#10;        &lt;/EditModeProvider&gt;&#10;      &lt;/LexicalComposer&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import { ToolbarPlugin } from '../toolbar/Toolbar';&#10;import './styles.css';&#10;import { editorNodes } from './nodes';&#10;import { PageInitializerPlugin } from './plugins/PageInitializerPlugin';&#10;import { EditModeProvider } from './EditModeContext';&#10;import { ContentSelectAllPlugin } from './plugins/ContentSelectAllPlugin';&#10;import { PageAutoSplitPlugin } from './plugins/PageAutoSplitPlugin';&#10;import PageContentFlowPlugin from './plugins/PageContentFlowPlugin';&#10;import PageContentEditable from './PageContentEditable';&#10;import { HeaderFooterSyncPlugin } from './plugins/HeaderFooterSyncPlugin';&#10;&#10;const theme = {&#10;  text: {&#10;    bold: 'editor-bold',&#10;    italic: 'editor-italic',&#10;    underline: 'editor-underline'&#10;  }&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;function initialEditorState(): void {&#10;  // Initial state handled by PageInitializerPlugin&#10;}&#10;&#10;export default function Editor(): JSX.Element {&#10;  const [headerFooterEditMode, setHeaderFooterEditMode] = React.useState(false);&#10;  const initialConfig = {&#10;    namespace: 'SimpleEditor',&#10;    theme,&#10;    onError,&#10;    editorState: initialEditorState,&#10;    nodes: editorNodes&#10;  } as const;&#10;&#10;  // EditModeContext'i hem değer hem setter ile sağlayalım&#10;  const editModeContextValue = React.useMemo(&#10;    () =&gt; ({ headerFooterEditMode, setHeaderFooterEditMode }),&#10;    [headerFooterEditMode]&#10;  );&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-a4-wrapper&quot;&gt;&#10;      &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;        &lt;EditModeProvider value={editModeContextValue}&gt;&#10;          &lt;ToolbarPlugin&#10;            headerFooterEditMode={headerFooterEditMode}&#10;            setHeaderFooterEditMode={setHeaderFooterEditMode}&#10;          /&gt;&#10;          &lt;RichTextPlugin&#10;            contentEditable={&lt;PageContentEditable /&gt;}&#10;            placeholder={&lt;div className=&quot;editor-placeholder&quot;&gt;Start typing...&lt;/div&gt;}&#10;            ErrorBoundary={LexicalErrorBoundary}&#10;          /&gt;&#10;          &lt;PageInitializerPlugin /&gt;&#10;          &lt;HistoryPlugin /&gt;&#10;          &lt;ContentSelectAllPlugin /&gt;&#10;          &lt;PageAutoSplitPlugin pageHeightMm={297} marginTopMm={20} marginBottomMm={20} /&gt;&#10;          &lt;PageContentFlowPlugin /&gt;&#10;          {/* Header/Footer senkronizasyonu için plugin ekleniyor */}&#10;          &lt;HeaderFooterSyncPlugin /&gt;&#10;        &lt;/EditModeProvider&gt;&#10;      &lt;/LexicalComposer&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/editor/PageContentEditable.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/PageContentEditable.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { useEditModeContext } from './EditModeContext';&#10;import './styles.css';&#10;&#10;/**&#10; * Profesyonelce: Edit mode kontrolü ve tıklama davranışı burada yönetilir.&#10; * Görsel olarak da &quot;disabled&quot; efekti eklenir.&#10; */&#10;export default function PageContentEditable() {&#10;  const { headerFooterEditMode, setHeaderFooterEditMode } = useEditModeContext();&#10;&#10;  const handleClick = React.useCallback(() =&gt; {&#10;    if (headerFooterEditMode &amp;&amp; setHeaderFooterEditMode) {&#10;      setHeaderFooterEditMode(false);&#10;    }&#10;  }, [headerFooterEditMode, setHeaderFooterEditMode]);&#10;&#10;  return (&#10;    &lt;div onClick={handleClick}&gt;&#10;      &lt;ContentEditable contentEditable={!headerFooterEditMode} /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { useEditModeContext } from './EditModeContext';&#10;import './styles.css';&#10;&#10;/**&#10; * Profesyonelce: Edit mode kontrolü ve tıklama davranışı burada yönetilir.&#10; * Görsel olarak da &quot;disabled&quot; efekti eklenir.&#10; */&#10;export default function PageContentEditable(): JSX.Element {&#10;  const { headerFooterEditMode, setHeaderFooterEditMode } = useEditModeContext();&#10;&#10;  const handleClick = React.useCallback(() =&gt; {&#10;    if (!!headerFooterEditMode &amp;&amp; !!setHeaderFooterEditMode) {&#10;      setHeaderFooterEditMode(false);&#10;    }&#10;  }, [headerFooterEditMode, setHeaderFooterEditMode]);&#10;&#10;  return (&#10;    &lt;div onClick={handleClick}&gt;&#10;      &lt;ContentEditable contentEditable={!headerFooterEditMode} /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/editor/nodes/SectionNode.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/nodes/SectionNode.tsx" />
              <option name="updatedContent" value="import { ElementNode, SerializedElementNode, EditorConfig, Spread } from 'lexical';&#10;import * as React from 'react';&#10;&#10;export type SerializedSectionNode = Spread&lt;&#10;  {&#10;    type: 'section';&#10;    version: 1;&#10;  },&#10;  SerializedElementNode&#10;&gt;;&#10;&#10;export class SectionNode extends ElementNode {&#10;  static getType(): string {&#10;    return 'section';&#10;  }&#10;&#10;  static clone(node: SectionNode): SectionNode {&#10;    return new SectionNode(node.__key);&#10;  }&#10;&#10;  createDOM(_config: EditorConfig): HTMLElement {&#10;    const dom = document.createElement('section');&#10;    dom.className = 'a4-section';&#10;    return dom;&#10;  }&#10;&#10;  updateDOM(): boolean {&#10;    return false;&#10;  }&#10;&#10;  static importJSON(_serializedNode: SerializedSectionNode): SectionNode {&#10;    return new SectionNode();&#10;  }&#10;&#10;  exportJSON(): SerializedSectionNode {&#10;    return {&#10;      ...super.exportJSON(),&#10;      type: 'section',&#10;      version: 1,&#10;    };&#10;  }&#10;&#10;  decorate(): JSX.Element | null {&#10;    return null;&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/editor/plugins/HeaderFooterSyncPlugin.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/plugins/HeaderFooterSyncPlugin.tsx" />
              <option name="originalContent" value="import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { useEffect, useRef } from 'react';&#10;import { $getRoot } from 'lexical';&#10;import { updateAllHeaders, updateAllFooters } from './HeaderFooterSyncUtils';&#10;import { $isPageNode } from '../nodes/PageNode';&#10;&#10;/**&#10; * Bu plugin, header/footer edit modundayken bir header/footer değişikliği olduğunda&#10;tüm sayfalardaki header/footer'ı otomatik olarak günceller.&#10; */&#10;export function HeaderFooterSyncPlugin(): JSX.Element | null {&#10;  const [editor] = useLexicalComposerContext();&#10;  const lastHeader = useRef&lt;{ text: string; visible: boolean } | null&gt;(null);&#10;  const lastFooter = useRef&lt;{ text: string; visible: boolean } | null&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(({ editorState }) =&gt; {&#10;      editorState.read(() =&gt; {&#10;        const root = $getRoot();&#10;        let headerText = '';&#10;        let headerVisible = false;&#10;        let footerText = '';&#10;        let footerVisible = false;&#10;        // İlk sayfanın header/footer'ını referans al&#10;        const firstPage = root.getChildren().find((node) =&gt; $isPageNode(node));&#10;        if (firstPage != null) {&#10;          const header = firstPage.getHeaderNode();&#10;          if (header != null) {&#10;            headerText = header.__text;&#10;            headerVisible = header.__visible;&#10;          }&#10;          const footer = firstPage.getFooterNode();&#10;          if (footer != null) {&#10;            footerText = footer.__text;&#10;            footerVisible = footer.__visible;&#10;          }&#10;        }&#10;        // Sadece değişiklik varsa güncelle&#10;        if (&#10;          lastHeader.current?.text !== headerText ||&#10;          lastHeader.current?.visible !== headerVisible&#10;        ) {&#10;          editor.update(() =&gt; {&#10;            updateAllHeaders(headerText, headerVisible);&#10;          });&#10;          lastHeader.current = { text: headerText, visible: headerVisible };&#10;        }&#10;        if (&#10;          lastFooter.current?.text !== footerText ||&#10;          lastFooter.current?.visible !== footerVisible&#10;        ) {&#10;          editor.update(() =&gt; {&#10;            updateAllFooters(footerText, footerVisible);&#10;          });&#10;          lastFooter.current = { text: footerText, visible: footerVisible };&#10;        }&#10;      });&#10;    });&#10;  }, [editor]);&#10;&#10;  return null;&#10;}&#10;" />
              <option name="updatedContent" value="import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { useEffect, useRef } from 'react';&#10;import { $getRoot } from 'lexical';&#10;import { updateAllHeaders, updateAllFooters } from './HeaderFooterSyncUtils';&#10;import { $isPageNode } from '../nodes/PageNode';&#10;&#10;/**&#10; * Bu plugin, header/footer edit modundayken bir header/footer değişikliği olduğunda&#10;tüm sayfalardaki header/footer'ı otomatik olarak günceller.&#10; */&#10;export function HeaderFooterSyncPlugin(): JSX.Element | null {&#10;  const [editor] = useLexicalComposerContext();&#10;  const lastHeader = useRef&lt;{ text: string; visible: boolean } | null&gt;(null);&#10;  const lastFooter = useRef&lt;{ text: string; visible: boolean } | null&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(({ editorState }) =&gt; {&#10;      editorState.read(() =&gt; {&#10;        const root = $getRoot();&#10;        // Tüm sayfalardaki header/footer'ları topla&#10;        const pageNodes = root.getChildren().filter($isPageNode);&#10;        let changedHeader: { text: string; visible: boolean } | null = null;&#10;        let changedFooter: { text: string; visible: boolean } | null = null;&#10;        // Header değişikliği tespiti&#10;        for (const page of pageNodes) {&#10;          const header = page.getHeaderNode();&#10;          if (header != null) {&#10;            if (&#10;              lastHeader.current == null ||&#10;              lastHeader.current.text !== header.__text ||&#10;              lastHeader.current.visible !== header.__visible&#10;            ) {&#10;              changedHeader = { text: header.__text, visible: header.__visible };&#10;              break;&#10;            }&#10;          }&#10;        }&#10;        // Footer değişikliği tespiti&#10;        for (const page of pageNodes) {&#10;          const footer = page.getFooterNode();&#10;          if (footer != null) {&#10;            if (&#10;              lastFooter.current == null ||&#10;              lastFooter.current.text !== footer.__text ||&#10;              lastFooter.current.visible !== footer.__visible&#10;            ) {&#10;              changedFooter = { text: footer.__text, visible: footer.__visible };&#10;              break;&#10;            }&#10;          }&#10;        }&#10;        // Değişiklik yapılan header'ı tüm sayfalara uygula&#10;        if (changedHeader != null) {&#10;          editor.update(() =&gt; {&#10;            updateAllHeaders(changedHeader!.text, changedHeader!.visible);&#10;          });&#10;          lastHeader.current = changedHeader;&#10;        }&#10;        // Değişiklik yapılan footer'ı tüm sayfalara uygula&#10;        if (changedFooter != null) {&#10;          editor.update(() =&gt; {&#10;            updateAllFooters(changedFooter!.text, changedFooter!.visible);&#10;          });&#10;          lastFooter.current = changedFooter;&#10;        }&#10;      });&#10;    });&#10;  }, [editor]);&#10;&#10;  return null;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/editor/plugins/HeaderFooterSyncUtils.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/plugins/HeaderFooterSyncUtils.ts" />
              <option name="originalContent" value="import { $getRoot } from 'lexical';&#10;import { PageHeaderNode } from '../nodes/PageHeaderNode';&#10;import { PageFooterNode } from '../nodes/PageFooterNode';&#10;import { $isPageNode } from '../nodes/PageNode';&#10;&#10;/**&#10; * Tüm PageNode'ların header'ını verilen text ve visible ile günceller&#10; */&#10;export function updateAllHeaders(text: string, visible: boolean) {&#10;  const root = $getRoot();&#10;  root.getChildren().forEach((pageNode) =&gt; {&#10;    if ($isPageNode(pageNode)) {&#10;      const header = pageNode.getHeaderNode();&#10;      if (header) {&#10;        header.setText(text);&#10;        header.setVisible(visible);&#10;      }&#10;    }&#10;  });&#10;}&#10;&#10;/**&#10; * Tüm PageNode'ların footer'ını verilen text ve visible ile günceller&#10; */&#10;export function updateAllFooters(text: string, visible: boolean) {&#10;  const root = $getRoot();&#10;  root.getChildren().forEach((pageNode) =&gt; {&#10;    if ($isPageNode(pageNode)) {&#10;      const footer = pageNode.getFooterNode();&#10;      if (footer) {&#10;        footer.setText(text);&#10;        footer.setVisible(visible);&#10;      }&#10;    }&#10;  });&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { $getRoot } from 'lexical';&#10;import { $isPageNode } from '../nodes/PageNode';&#10;&#10;/**&#10; * Tüm PageNode'ların header'ını verilen text ve visible ile günceller&#10; */&#10;export function updateAllHeaders(text: string, visible: boolean): void {&#10;  const root = $getRoot();&#10;  root.getChildren().forEach((pageNode) =&gt; {&#10;    if ($isPageNode(pageNode)) {&#10;      const header = pageNode.getHeaderNode();&#10;      if (header != null) {&#10;        header.setText(text);&#10;        header.setVisible(visible);&#10;      }&#10;    }&#10;  });&#10;}&#10;&#10;/**&#10; * Tüm PageNode'ların footer'ını verilen text ve visible ile günceller&#10; */&#10;export function updateAllFooters(text: string, visible: boolean): void {&#10;  const root = $getRoot();&#10;  root.getChildren().forEach((pageNode) =&gt; {&#10;    if ($isPageNode(pageNode)) {&#10;      const footer = pageNode.getFooterNode();&#10;      if (footer != null) {&#10;        footer.setText(text);&#10;        footer.setVisible(visible);&#10;      }&#10;    }&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/editor/plugins/SectionToolbarPlugin.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/plugins/SectionToolbarPlugin.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { PageNode } from '../nodes/PageNode';&#10;&#10;interface Props {&#10;  editMode: boolean;&#10;  setEditMode: (v: boolean) =&gt; void;&#10;  showHeader: boolean;&#10;  setShowHeader: (v: boolean) =&gt; void;&#10;  showFooter: boolean;&#10;  setShowFooter: (v: boolean) =&gt; void;&#10;}&#10;&#10;export function SectionToolbarPlugin({&#10;  editMode,&#10;  setEditMode,&#10;  showHeader,&#10;  setShowHeader,&#10;  showFooter,&#10;  setShowFooter,&#10;}: Props) {&#10;  const [editor] = useLexicalComposerContext();&#10;&#10;  const handleAddSection = () =&gt; {&#10;    PageNode.createSection(editor);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      &lt;button&#10;        onClick={() =&gt; setEditMode(!editMode)}&#10;        className={editMode ? 'active' : ''}&#10;        style={{ marginLeft: 16 }}&#10;        title={editMode ? 'Düzenleme Modunu Kapat' : 'Header/Footer Düzenle'}&#10;      &gt;&#10;        {editMode ? 'Düzenleme Modunu Kapat' : 'Header/Footer Düzenle'}&#10;      &lt;/button&gt;&#10;      &lt;button&#10;        onClick={() =&gt; setShowHeader(!showHeader)}&#10;        className={showHeader ? 'active' : ''}&#10;        style={{ marginLeft: 8 }}&#10;        title={showHeader ? 'Header Kaldır' : 'Header Ekle'}&#10;      &gt;&#10;        {showHeader ? 'Header Kaldır' : 'Header Ekle'}&#10;      &lt;/button&gt;&#10;      &lt;button&#10;        onClick={() =&gt; setShowFooter(!showFooter)}&#10;        className={showFooter ? 'active' : ''}&#10;        style={{ marginLeft: 8 }}&#10;        title={showFooter ? 'Footer Kaldır' : 'Footer Ekle'}&#10;      &gt;&#10;        {showFooter ? 'Footer Kaldır' : 'Footer Ekle'}&#10;      &lt;/button&gt;&#10;      &lt;button&#10;        onClick={handleAddSection}&#10;        style={{ marginLeft: 8 }}&#10;        title=&quot;Section Ekle&quot;&#10;      &gt;&#10;        Section Ekle&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { PageNode } from '../nodes/PageNode';&#10;import * as Toolbar from '@radix-ui/react-toolbar';&#10;&#10;interface Props {&#10;  editMode: boolean;&#10;  setEditMode: (v: boolean) =&gt; void;&#10;  showHeader: boolean;&#10;  setShowHeader: (v: boolean) =&gt; void;&#10;  showFooter: boolean;&#10;  setShowFooter: (v: boolean) =&gt; void;&#10;}&#10;&#10;export function SectionToolbarPlugin({&#10;  editMode,&#10;  setEditMode,&#10;  showHeader,&#10;  setShowHeader,&#10;  showFooter,&#10;  setShowFooter,&#10;}: Props) {&#10;  const [editor] = useLexicalComposerContext();&#10;&#10;  const handleAddSection = () =&gt; {&#10;    PageNode.createSection(editor);&#10;  };&#10;&#10;  return (&#10;    &lt;Toolbar.Root className=&quot;toolbarRoot&quot;&gt;&#10;      &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;        &lt;Toolbar.Button&#10;          onClick={() =&gt; setEditMode(!editMode)}&#10;          className={`toolbarButton${editMode ? ' active' : ''}`}&#10;          title={editMode ? 'Düzenleme Modunu Kapat' : 'Header/Footer Düzenle'}&#10;        &gt;&#10;          {editMode ? 'Düzenleme Modunu Kapat' : 'Header/Footer Düzenle'}&#10;        &lt;/Toolbar.Button&gt;&#10;        &lt;Toolbar.Button&#10;          onClick={() =&gt; setShowHeader(!showHeader)}&#10;          className={`toolbarButton${showHeader ? ' active' : ''}`}&#10;          title={showHeader ? 'Header Kaldır' : 'Header Ekle'}&#10;        &gt;&#10;          {showHeader ? 'Header Kaldır' : 'Header Ekle'}&#10;        &lt;/Toolbar.Button&gt;&#10;        &lt;Toolbar.Button&#10;          onClick={() =&gt; setShowFooter(!showFooter)}&#10;          className={`toolbarButton${showFooter ? ' active' : ''}`}&#10;          title={showFooter ? 'Footer Kaldır' : 'Footer Ekle'}&#10;        &gt;&#10;          {showFooter ? 'Footer Kaldır' : 'Footer Ekle'}&#10;        &lt;/Toolbar.Button&gt;&#10;        &lt;Toolbar.Button&#10;          onClick={handleAddSection}&#10;          className=&quot;toolbarButton&quot;&#10;          title=&quot;Section Ekle&quot;&#10;        &gt;&#10;          Section Ekle&#10;        &lt;/Toolbar.Button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Toolbar.Root&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/editor/styles.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/editor/styles.css" />
              <option name="originalContent" value="/* Çakışmasız ve taşma yapmayan A4 düzeni - DÜZELTİLDİ */&#10;.editor-a4-wrapper {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  min-height: 100vh;&#10;  background: #f4f4f4;&#10;  padding: 40px 0;&#10;}&#10;&#10;.a4-page {&#10;  margin: 10px;&#10;  border: 1px solid #e5e7eb; /* subtle border */&#10;  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.06), 0 2px 6px rgba(0, 0, 0, 0.04);&#10;  overflow: hidden; /* ensure rounded corners clip children */&#10;  transition: box-shadow 180ms ease, border-color 180ms ease;&#10;}&#10;&#10;.toolbarRoot {&#10;  margin-bottom: 24px;&#10;  z-index: 10;&#10;}&#10;.a4-header {&#10;  /* 32mm ≈ 121px at 96dpi */&#10;  flex: 0 0 121px;&#10;  background: #f8fafc;&#10;  padding: 12px 24px;&#10;  font-weight: 600;&#10;  font-size: 20px;&#10;  color: #333;&#10;  box-sizing: border-box;&#10;  overflow: hidden; /* Taşmayı engelle */&#10;}&#10;&#10;.a4-content {&#10;  flex: 1 1 auto;&#10;  min-height: 0;&#10;  height: auto;&#10;  padding: 16px 24px 0 24px; /* alt boşluğu kaldır */&#10;  font-size: 16px;&#10;  line-height: 1.55;&#10;  color: #111827;&#10;  /* overflow: auto; kaldırıldı, scroll çıkmayacak */&#10;}&#10;&#10;/* Son elemanın aşağıda boşluk bırakmasını önle */&#10;.a4-content &gt; :last-child {&#10;  margin-bottom: 0 !important;&#10;}&#10;&#10;/* Lexical yapısında iç içe bloklar için de son elemanın boşluğunu kaldır */&#10;.a4-content p:last-child,&#10;.a4-content ul:last-child,&#10;.a4-content ol:last-child,&#10;.a4-content h1:last-child,&#10;.a4-content h2:last-child,&#10;.a4-content h3:last-child,&#10;.a4-content blockquote:last-child,&#10;.a4-content div:last-child {&#10;  margin-bottom: 0 !important;&#10;}&#10;&#10;/* İçerikteki son br (tarayıcı eklediği) görünmesin */&#10;.a4-content br:last-child {&#10;  display: none;&#10;}&#10;&#10;.a4-footer {&#10;  /* 20mm ≈ 76px at 96dpi */&#10;  flex: 0 0 76px;&#10;  background: #f8fafc;&#10;  border-top: 1px solid #e0e0e0;&#10;  padding: 8px 24px;&#10;  font-size: 16px;&#10;  color: #333;&#10;  box-sizing: border-box;&#10;  overflow: hidden; /* Taşmayı engelle */&#10;  align-items: center; /* tek satırı dikey hizala */&#10;  line-height: 1.2; /* satır kutusunu daralt */&#10;  margin-top: auto; /* Footer'ı her zaman en alta it */&#10;}&#10;&#10;/* Footer içindeki default margin'leri sıfırla */&#10;.a4-footer p,&#10;.a4-footer div {&#10;  margin: 0;&#10;}&#10;&#10;/* İçeriksizken oluşan son &lt;br&gt; satırını gizle */&#10;.a4-footer br:last-child {&#10;  display: none;&#10;}&#10;&#10;.editor-placeholder {&#10;  color: #bbb;&#10;  pointer-events: none;&#10;  font-size: 16px;&#10;  font-style: italic;&#10;}&#10;&#10;/* Contenteditable focus ring (header/footer edit modunda) */&#10;[contenteditable='true']:focus {&#10;  outline: 2px solid #1976d2;&#10;  outline-offset: 2px;&#10;}&#10;&#10;/* Selection styling inside page */&#10;.a4-page ::selection {&#10;  background: #dbeafe;&#10;  color: #111827;&#10;}&#10;&#10;/* Typography improvements inside content */&#10;.a4-content h1 {&#10;  font-size: 28px;&#10;  line-height: 1.25;&#10;  margin: 16px 0 8px;&#10;  font-weight: 700;&#10;}&#10;.a4-content h2 {&#10;  font-size: 24px;&#10;  line-height: 1.3;&#10;  margin: 14px 0 8px;&#10;  font-weight: 700;&#10;}&#10;.a4-content h3 {&#10;  font-size: 20px;&#10;  line-height: 1.35;&#10;  margin: 12px 0 6px;&#10;  font-weight: 700;&#10;}&#10;.a4-content p {&#10;  margin: 0 0 12px;&#10;}&#10;.a4-content ul,&#10;.a4-content ol {&#10;  margin: 0 0 12px 22px;&#10;}&#10;.a4-content a {&#10;  color: #1d4ed8;&#10;  text-decoration: underline;&#10;}&#10;.a4-content hr {&#10;  border: 0;&#10;  border-top: 1px solid #e5e7eb;&#10;  margin: 16px 0;&#10;}&#10;&#10;/* Subtle scrollbars for content area (webkit) */&#10;.a4-content::-webkit-scrollbar {&#10;  width: 10px;&#10;  height: 10px;&#10;}&#10;.a4-content::-webkit-scrollbar-thumb {&#10;  background: #c7d2fe;&#10;  border-radius: 8px;&#10;}&#10;.a4-content::-webkit-scrollbar-thumb:hover {&#10;  background: #a5b4fc;&#10;}&#10;.a4-content::-webkit-scrollbar-track {&#10;  background: transparent;&#10;}&#10;&#10;@media (max-width: 900px) {&#10;  .a4-page {&#10;    width: 100vw;&#10;    min-width: 0;&#10;    border-radius: 0;&#10;  }&#10;  .a4-header,&#10;  .a4-content,&#10;  .a4-footer {&#10;    padding-left: 12px;&#10;    padding-right: 12px;&#10;  }&#10;}&#10;&#10;/* Theme classes for text formatting */&#10;.editor-bold {&#10;  font-weight: 700;&#10;}&#10;.editor-italic {&#10;  font-style: italic;&#10;}&#10;.editor-underline {&#10;  text-decoration: underline;&#10;}&#10;&#10;.content-editable-disabled {&#10;  opacity: 0.6;&#10;  pointer-events: auto; /* Tıklama ile edit mode kapanabilsin diye */&#10;  user-select: none;&#10;  background: repeating-linear-gradient(135deg, #f5f5f5, #f5f5f5 10px, #e0e0e0 10px, #e0e0e0 20px);&#10;  transition: opacity 0.2s;&#10;}&#10;" />
              <option name="updatedContent" value="/* Çakışmasız ve taşma yapmayan A4 düzeni - DÜZELTİLDİ */&#10;.editor-a4-wrapper {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  min-height: 100vh;&#10;  background: #f4f4f4;&#10;  padding: 40px 0;&#10;}&#10;&#10;.a4-page {&#10;  margin: 10px;&#10;  border: 1px solid #e5e7eb; /* subtle border */&#10;  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.06), 0 2px 6px rgba(0, 0, 0, 0.04);&#10;  overflow: hidden; /* ensure rounded corners clip children */&#10;  transition: box-shadow 180ms ease, border-color 180ms ease;&#10;}&#10;&#10;.toolbarRoot {&#10;  margin-bottom: 24px;&#10;  z-index: 10;&#10;}&#10;.a4-header {&#10;  /* 32mm ≈ 121px at 96dpi */&#10;  flex: 0 0 121px;&#10;  background: #f8fafc;&#10;  padding: 12px 24px;&#10;  font-weight: 600;&#10;  font-size: 20px;&#10;  color: #333;&#10;  box-sizing: border-box;&#10;  overflow: hidden; /* Taşmayı engelle */&#10;}&#10;&#10;.a4-content {&#10;  flex: 1 1 auto;&#10;  min-height: 0;&#10;  height: auto;&#10;  padding: 16px 24px 0 24px; /* alt boşluğu kaldır */&#10;  font-size: 16px;&#10;  line-height: 1.55;&#10;  color: #111827;&#10;  /* overflow: auto; kaldırıldı, scroll çıkmayacak */&#10;}&#10;&#10;/* Son elemanın aşağıda boşluk bırakmasını önle */&#10;.a4-content &gt; :last-child {&#10;  margin-bottom: 0 !important;&#10;}&#10;&#10;/* Lexical yapısında iç içe bloklar için de son elemanın boşluğunu kaldır */&#10;.a4-content p:last-child,&#10;.a4-content ul:last-child,&#10;.a4-content ol:last-child,&#10;.a4-content h1:last-child,&#10;.a4-content h2:last-child,&#10;.a4-content h3:last-child,&#10;.a4-content blockquote:last-child,&#10;.a4-content div:last-child {&#10;  margin-bottom: 0 !important;&#10;}&#10;&#10;/* İçerikteki son br (tarayıcı eklediği) görünmesin */&#10;.a4-content br:last-child {&#10;  display: none;&#10;}&#10;&#10;.a4-footer {&#10;  /* 20mm ≈ 76px at 96dpi */&#10;  flex: 0 0 76px;&#10;  background: #f8fafc;&#10;  border-top: 1px solid #e0e0e0;&#10;  padding: 8px 24px;&#10;  font-size: 16px;&#10;  color: #333;&#10;  box-sizing: border-box;&#10;  overflow: hidden; /* Taşmayı engelle */&#10;  align-items: center; /* tek satırı dikey hizala */&#10;  line-height: 1.2; /* satır kutusunu daralt */&#10;  margin-top: auto; /* Footer'ı her zaman en alta it */&#10;}&#10;&#10;/* Footer içindeki default margin'leri sıfırla */&#10;.a4-footer p,&#10;.a4-footer div {&#10;  margin: 0;&#10;}&#10;&#10;/* İçeriksizken oluşan son &lt;br&gt; satırını gizle */&#10;.a4-footer br:last-child {&#10;  display: none;&#10;}&#10;&#10;.editor-placeholder {&#10;  color: #bbb;&#10;  pointer-events: none;&#10;  font-size: 16px;&#10;  font-style: italic;&#10;}&#10;&#10;/* Contenteditable focus ring (header/footer edit modunda) */&#10;[contenteditable='true']:focus {&#10;  outline: 2px solid #1976d2;&#10;  outline-offset: 2px;&#10;}&#10;&#10;/* Selection styling inside page */&#10;.a4-page ::selection {&#10;  background: #dbeafe;&#10;  color: #111827;&#10;}&#10;&#10;/* Typography improvements inside content */&#10;.a4-content h1 {&#10;  font-size: 28px;&#10;  line-height: 1.25;&#10;  margin: 16px 0 8px;&#10;  font-weight: 700;&#10;}&#10;.a4-content h2 {&#10;  font-size: 24px;&#10;  line-height: 1.3;&#10;  margin: 14px 0 8px;&#10;  font-weight: 700;&#10;}&#10;.a4-content h3 {&#10;  font-size: 20px;&#10;  line-height: 1.35;&#10;  margin: 12px 0 6px;&#10;  font-weight: 700;&#10;}&#10;.a4-content p {&#10;  margin: 0 0 12px;&#10;}&#10;.a4-content ul,&#10;.a4-content ol {&#10;  margin: 0 0 12px 22px;&#10;}&#10;.a4-content a {&#10;  color: #1d4ed8;&#10;  text-decoration: underline;&#10;}&#10;.a4-content hr {&#10;  border: 0;&#10;  border-top: 1px solid #e5e7eb;&#10;  margin: 16px 0;&#10;}&#10;&#10;/* Subtle scrollbars for content area (webkit) */&#10;.a4-content::-webkit-scrollbar {&#10;  width: 10px;&#10;  height: 10px;&#10;}&#10;.a4-content::-webkit-scrollbar-thumb {&#10;  background: #c7d2fe;&#10;  border-radius: 8px;&#10;}&#10;.a4-content::-webkit-scrollbar-thumb:hover {&#10;  background: #a5b4fc;&#10;}&#10;.a4-content::-webkit-scrollbar-track {&#10;  background: transparent;&#10;}&#10;&#10;@media (max-width: 900px) {&#10;  .a4-page {&#10;    width: 100vw;&#10;    min-width: 0;&#10;    border-radius: 0;&#10;  }&#10;  .a4-header,&#10;  .a4-content,&#10;  .a4-footer {&#10;    padding-left: 12px;&#10;    padding-right: 12px;&#10;  }&#10;}&#10;&#10;/* Theme classes for text formatting */&#10;.editor-bold {&#10;  font-weight: 700;&#10;}&#10;.editor-italic {&#10;  font-style: italic;&#10;}&#10;.editor-underline {&#10;  text-decoration: underline;&#10;}&#10;&#10;/* .content-editable-disabled {&#10;  opacity: 0.6;&#10;  pointer-events: auto; &#10;  user-select: none;&#10;  background: repeating-linear-gradient(135deg, #f5f5f5, #f5f5f5 10px, #e0e0e0 10px, #e0e0e0 20px);&#10;  transition: opacity 0.2s;&#10;} */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/Editor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/Editor.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import {&#10;  DEFAULT_PAGINATION_SETTINGS,&#10;  type PaginationSettings&#10;} from './plugins/pagination/PaginationSettings';&#10;import { PageBreakNode } from './plugins/pagination/PageBreakNode';&#10;import { WordCountPlugin } from './plugins/WordCountPlugin';&#10;import { ToolbarPlugin } from '../glyf-toolbar/Toolbar';&#10;import './styles.css';&#10;import { BannerNode, BannerPlugin } from './plugins/banner/BannerPlugin';&#10;&#10;const theme = {&#10;  text: {&#10;    bold: 'editor-bold',&#10;    italic: 'editor-italic',&#10;    underline: 'editor-underline'&#10;  }&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;export default function Editor({&#10;  onWordCountChange&#10;}: {&#10;  onWordCountChange?: (words: number, chars: number) =&gt; void;&#10;}): JSX.Element {&#10;  const [pageCount, setPageCount] = React.useState(1);&#10;  const paginationSettings: PaginationSettings = DEFAULT_PAGINATION_SETTINGS;&#10;&#10;  const handlePageCountChange = React.useCallback((count: number) =&gt; {&#10;    setPageCount(count);&#10;  }, []);&#10;&#10;  const initialConfig = {&#10;    namespace: 'SimpleEditor',&#10;    theme,&#10;    onError,&#10;    nodes: [PageBreakNode, BannerNode]&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-container paginated&quot;&gt;&#10;      &lt;div className=&quot;page-indicator&quot;&gt;Page {pageCount}&lt;/div&gt;&#10;      &lt;div&#10;        className=&quot;a4-page&quot;&#10;        style={{&#10;          width: `${paginationSettings.pageWidth}mm`,&#10;          minHeight: `${paginationSettings.pageHeight}mm`,&#10;          margin: `${paginationSettings.marginTop}mm ${paginationSettings.marginRight}mm ${paginationSettings.marginBottom}mm ${paginationSettings.marginLeft}mm`&#10;        }}&#10;      &gt;&#10;        &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;          &lt;ToolbarPlugin /&gt;&#10;          &lt;BannerPlugin /&gt;&#10;          &lt;RichTextPlugin&#10;            contentEditable={&lt;ContentEditable className=&quot;contentEditable&quot; /&gt;}&#10;            placeholder={&lt;div className=&quot;placeholder&quot;&gt;Start typing...&lt;/div&gt;}&#10;            ErrorBoundary={LexicalErrorBoundary}&#10;          /&gt;&#10;          &lt;HistoryPlugin /&gt;&#10;          &lt;PaginationPlugin&#10;            settings={paginationSettings}&#10;            onPageCountChange={handlePageCountChange}&#10;          /&gt;&#10;          &lt;WordCountPlugin onWordCountChange={onWordCountChange} /&gt;&#10;        &lt;/LexicalComposer&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import { PaginationPlugin } from './plugins/pagination/PaginationPlugin';&#10;import { DEFAULT_PAGINATION_SETTINGS, type PaginationSettings } from './plugins/pagination/PaginationSettings';&#10;import { PageBreakNode } from './plugins/pagination/PageBreakNode';&#10;import { WordCountPlugin } from './plugins/WordCountPlugin';&#10;import { ToolbarPlugin } from '../glyf-toolbar/Toolbar';&#10;import './styles.css';&#10;import { BannerNode, BannerPlugin } from './plugins/banner/BannerPlugin';&#10;&#10;const theme = {&#10;  text: {&#10;    bold: 'editor-bold',&#10;    italic: 'editor-italic',&#10;    underline: 'editor-underline'&#10;  }&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;export default function Editor({&#10;  onWordCountChange&#10;}: {&#10;  onWordCountChange?: (words: number, chars: number) =&gt; void;&#10;}): JSX.Element {&#10;  const [pageCount, setPageCount] = React.useState(1);&#10;  const paginationSettings: PaginationSettings = DEFAULT_PAGINATION_SETTINGS;&#10;&#10;  const handlePageCountChange = React.useCallback((count: number) =&gt; {&#10;    setPageCount(count);&#10;  }, []);&#10;&#10;  const initialConfig = {&#10;    namespace: 'SimpleEditor',&#10;    theme,&#10;    onError,&#10;    nodes: [PageBreakNode, BannerNode]&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-container paginated&quot;&gt;&#10;      &lt;div className=&quot;page-indicator&quot;&gt;Page {pageCount}&lt;/div&gt;&#10;      &lt;div&#10;        className=&quot;a4-page&quot;&#10;        style={{&#10;          width: `${paginationSettings.pageWidth}mm`,&#10;          minHeight: `${paginationSettings.pageHeight}mm`,&#10;          margin: `${paginationSettings.marginTop}mm ${paginationSettings.marginRight}mm ${paginationSettings.marginBottom}mm ${paginationSettings.marginLeft}mm`&#10;        }}&#10;      &gt;&#10;        &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;          &lt;ToolbarPlugin /&gt;&#10;          &lt;BannerPlugin /&gt;&#10;          &lt;RichTextPlugin&#10;            contentEditable={&lt;ContentEditable className=&quot;contentEditable&quot; /&gt;}&#10;            placeholder={&lt;div className=&quot;placeholder&quot;&gt;Start typing...&lt;/div&gt;}&#10;            ErrorBoundary={LexicalErrorBoundary}&#10;          /&gt;&#10;          &lt;HistoryPlugin /&gt;&#10;          &lt;PaginationPlugin&#10;            settings={paginationSettings}&#10;            onPageCountChange={handlePageCountChange}&#10;          /&gt;&#10;          &lt;WordCountPlugin onWordCountChange={onWordCountChange} /&gt;&#10;        &lt;/LexicalComposer&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/WordCountPlugin.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/WordCountPlugin.tsx" />
              <option name="updatedContent" value="import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { useEffect } from 'react';&#10;import { $getRoot } from 'lexical';&#10;&#10;export function WordCountPlugin({&#10;  onWordCountChange&#10;}: {&#10;  onWordCountChange?: (words: number, chars: number) =&gt; void;&#10;}): null {&#10;  const [editor] = useLexicalComposerContext();&#10;&#10;  useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(() =&gt; {&#10;      editor.getEditorState().read(() =&gt; {&#10;        const text = $getRoot().getTextContent();&#10;        const words = text.trim().split(/\s+/).filter((word) =&gt; word.length &gt; 0).length;&#10;        const chars = text.length;&#10;        onWordCountChange?.(words, chars);&#10;      });&#10;    });&#10;  }, [editor, onWordCountChange]);&#10;&#10;  return null;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/plugins/pagination/PaginationPlugin.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/plugins/pagination/PaginationPlugin.tsx" />
              <option name="originalContent" value="import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { $getRoot } from 'lexical';&#10;import { useEffect, useCallback } from 'react';&#10;import { $createPageBreakNode, $isPageBreakNode, type PageBreakNode } from './PageBreakNode';&#10;&#10;export interface PaginationSettings {&#10;  pageHeight: number; // mm&#10;  pageWidth: number; // mm&#10;  marginTop: number; // mm&#10;  marginBottom: number; // mm&#10;  marginLeft: number; // mm&#10;  marginRight: number; // mm&#10;}&#10;&#10;export const DEFAULT_PAGINATION_SETTINGS: PaginationSettings = {&#10;  pageHeight: 297, // A4 height&#10;  pageWidth: 210, // A4 width&#10;  marginTop: 25,&#10;  marginBottom: 25,&#10;  marginLeft: 20,&#10;  marginRight: 20&#10;};&#10;&#10;export const PAGINATION_PRESETS: Record&lt;string, Partial&lt;PaginationSettings&gt;&gt; = {&#10;  A4: { pageWidth: 210, pageHeight: 297 },&#10;  A3: { pageWidth: 297, pageHeight: 420 },&#10;  Letter: { pageWidth: 216, pageHeight: 279 },&#10;  Legal: { pageWidth: 216, pageHeight: 356 }&#10;};&#10;&#10;export function PaginationPlugin({&#10;  settings = DEFAULT_PAGINATION_SETTINGS,&#10;  onPageCountChange&#10;}: {&#10;  settings?: Partial&lt;PaginationSettings&gt;;&#10;  onPageCountChange?: (pageCount: number) =&gt; void;&#10;}): null {&#10;  const [editor] = useLexicalComposerContext();&#10;  const finalSettings = { ...DEFAULT_PAGINATION_SETTINGS, ...settings };&#10;  const contentHeight =&#10;    finalSettings.pageHeight - finalSettings.marginTop - finalSettings.marginBottom;&#10;&#10;  const checkForPageBreak = useCallback(() =&gt; {&#10;    editor.update(() =&gt; {&#10;      const root = $getRoot();&#10;      const children = root.getChildren();&#10;      let currentPageHeight = 0;&#10;      let currentPageNumber = 1;&#10;      const pageBreaksToAdd: Array&lt;{ index: number; pageNumber: number }&gt; = [];&#10;      const existingPageBreaks: PageBreakNode[] = [];&#10;&#10;      // Collect existing page breaks&#10;      children.forEach((child) =&gt; {&#10;        if ($isPageBreakNode(child)) {&#10;          existingPageBreaks.push(child);&#10;        }&#10;      });&#10;&#10;      // Remove all existing page breaks&#10;      existingPageBreaks.forEach((pageBreak) =&gt; {&#10;        pageBreak.remove();&#10;      });&#10;&#10;      // Recalculate page breaks&#10;      const updatedChildren = root.getChildren();&#10;      updatedChildren.forEach((child, index) =&gt; {&#10;        if (!$isPageBreakNode(child)) {&#10;          const element = editor.getElementByKey(child.getKey());&#10;          if (element !== null) {&#10;            const elementHeight = element.offsetHeight;&#10;            const elementHeightMm = (elementHeight * 25.4) / 96; // Convert px to mm&#10;&#10;            if (currentPageHeight + elementHeightMm &gt; contentHeight) {&#10;              pageBreaksToAdd.push({ index, pageNumber: currentPageNumber + 1 });&#10;              currentPageNumber++;&#10;              currentPageHeight = elementHeightMm;&#10;            } else {&#10;              currentPageHeight += elementHeightMm;&#10;            }&#10;          }&#10;        }&#10;      });&#10;&#10;      // Add page breaks&#10;      pageBreaksToAdd.reverse().forEach(({ index, pageNumber }) =&gt; {&#10;        const nodeAtIndex = root.getChildAtIndex(index);&#10;        if (nodeAtIndex !== null) {&#10;          const pageBreak = $createPageBreakNode(pageNumber);&#10;          nodeAtIndex.insertBefore(pageBreak);&#10;        }&#10;      });&#10;&#10;      // Update page count&#10;      const newPageCount = Math.max(1, currentPageNumber);&#10;      onPageCountChange?.(newPageCount);&#10;    });&#10;  }, [editor, contentHeight, onPageCountChange]);&#10;&#10;  useEffect(() =&gt; {&#10;    const timer = setTimeout(() =&gt; {&#10;      checkForPageBreak();&#10;    }, 500);&#10;&#10;    return () =&gt; {&#10;      clearTimeout(timer);&#10;    };&#10;  }, [checkForPageBreak]);&#10;&#10;  useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(({ dirtyElements, dirtyLeaves }) =&gt; {&#10;      if (dirtyElements.size &gt; 0 || dirtyLeaves.size &gt; 0) {&#10;        setTimeout(() =&gt; {&#10;          checkForPageBreak();&#10;        }, 100);&#10;      }&#10;    });&#10;  }, [editor, checkForPageBreak]);&#10;&#10;  return null;&#10;}&#10;" />
              <option name="updatedContent" value="import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { $getRoot } from 'lexical';&#10;import { useEffect, useCallback } from 'react';&#10;import { $createPageBreakNode, $isPageBreakNode, type PageBreakNode } from './PageBreakNode';&#10;import { PaginationSettings, DEFAULT_PAGINATION_SETTINGS, PAGINATION_PRESETS } from './PaginationSettings';&#10;&#10;export function PaginationPlugin({&#10;  settings = DEFAULT_PAGINATION_SETTINGS,&#10;  onPageCountChange&#10;}: {&#10;  settings?: Partial&lt;PaginationSettings&gt;;&#10;  onPageCountChange?: (pageCount: number) =&gt; void;&#10;}): null {&#10;  const [editor] = useLexicalComposerContext();&#10;  const finalSettings = { ...DEFAULT_PAGINATION_SETTINGS, ...settings };&#10;  const contentHeight =&#10;    finalSettings.pageHeight - finalSettings.marginTop - finalSettings.marginBottom;&#10;&#10;  const checkForPageBreak = useCallback(() =&gt; {&#10;    editor.update(() =&gt; {&#10;      const root = $getRoot();&#10;      const children = root.getChildren();&#10;      let currentPageHeight = 0;&#10;      let currentPageNumber = 1;&#10;      const pageBreaksToAdd: Array&lt;{ index: number; pageNumber: number }&gt; = [];&#10;      const existingPageBreaks: PageBreakNode[] = [];&#10;&#10;      // Collect existing page breaks&#10;      children.forEach((child) =&gt; {&#10;        if ($isPageBreakNode(child)) {&#10;          existingPageBreaks.push(child);&#10;        }&#10;      });&#10;&#10;      // Remove all existing page breaks&#10;      existingPageBreaks.forEach((pageBreak) =&gt; {&#10;        pageBreak.remove();&#10;      });&#10;&#10;      // Recalculate page breaks&#10;      const updatedChildren = root.getChildren();&#10;      updatedChildren.forEach((child, index) =&gt; {&#10;        if (!$isPageBreakNode(child)) {&#10;          const element = editor.getElementByKey(child.getKey());&#10;          if (element !== null) {&#10;            const elementHeight = element.offsetHeight;&#10;            const elementHeightMm = (elementHeight * 25.4) / 96; // Convert px to mm&#10;&#10;            if (currentPageHeight + elementHeightMm &gt; contentHeight) {&#10;              pageBreaksToAdd.push({ index, pageNumber: currentPageNumber + 1 });&#10;              currentPageNumber++;&#10;              currentPageHeight = elementHeightMm;&#10;            } else {&#10;              currentPageHeight += elementHeightMm;&#10;            }&#10;          }&#10;        }&#10;      });&#10;&#10;      // Add page breaks&#10;      pageBreaksToAdd.reverse().forEach(({ index, pageNumber }) =&gt; {&#10;        const nodeAtIndex = root.getChildAtIndex(index);&#10;        if (nodeAtIndex !== null) {&#10;          const pageBreak = $createPageBreakNode(pageNumber);&#10;          nodeAtIndex.insertBefore(pageBreak);&#10;        }&#10;      });&#10;&#10;      // Update page count&#10;      const newPageCount = Math.max(1, currentPageNumber);&#10;      onPageCountChange?.(newPageCount);&#10;    });&#10;  }, [editor, contentHeight, onPageCountChange]);&#10;&#10;  useEffect(() =&gt; {&#10;    const timer = setTimeout(() =&gt; {&#10;      checkForPageBreak();&#10;    }, 500);&#10;&#10;    return () =&gt; {&#10;      clearTimeout(timer);&#10;    };&#10;  }, [checkForPageBreak]);&#10;&#10;  useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(({ dirtyElements, dirtyLeaves }) =&gt; {&#10;      if (dirtyElements.size &gt; 0 || dirtyLeaves.size &gt; 0) {&#10;        setTimeout(() =&gt; {&#10;          checkForPageBreak();&#10;        }, 100);&#10;      }&#10;    });&#10;  }, [editor, checkForPageBreak]);&#10;&#10;  return null;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/plugins/pagination/PaginationSettingsPanel.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/plugins/pagination/PaginationSettingsPanel.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import type { PaginationSettings } from './PaginationPlugin';&#10;&#10;interface PaginationSettingsProps {&#10;  settings: PaginationSettings;&#10;  onSettingsChange: (settings: PaginationSettings) =&gt; void;&#10;  isVisible: boolean;&#10;  onToggle: () =&gt; void;&#10;}&#10;&#10;export function PaginationSettingsPanel({&#10;  settings,&#10;  onSettingsChange,&#10;  isVisible,&#10;  onToggle&#10;}: PaginationSettingsProps): JSX.Element {&#10;  const [localSettings, setLocalSettings] = useState(settings);&#10;&#10;  const handleChange = (field: keyof PaginationSettings, value: number): void =&gt; {&#10;    const newSettings = { ...localSettings, [field]: value };&#10;    setLocalSettings(newSettings);&#10;    onSettingsChange(newSettings);&#10;  };&#10;&#10;  const presets = {&#10;    A4: { pageWidth: 210, pageHeight: 297 },&#10;    A3: { pageWidth: 297, pageHeight: 420 },&#10;    Letter: { pageWidth: 216, pageHeight: 279 },&#10;    Legal: { pageWidth: 216, pageHeight: 356 }&#10;  };&#10;&#10;  const applyPreset = (preset: keyof typeof presets): void =&gt; {&#10;    const newSettings = {&#10;      ...localSettings,&#10;      ...presets[preset]&#10;    };&#10;    setLocalSettings(newSettings);&#10;    onSettingsChange(newSettings);&#10;  };&#10;&#10;  if (!isVisible) {&#10;    return (&#10;      &lt;button className=&quot;pagination-control-btn settings-toggle&quot; onClick={onToggle}&gt;&#10;        ⚙️&#10;      &lt;/button&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;page-settings&quot;&gt;&#10;      &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;&#10;        &lt;h3&gt;Sayfa Ayarları&lt;/h3&gt;&#10;        &lt;button&#10;          onClick={onToggle}&#10;          style={{&#10;            background: 'none',&#10;            border: 'none',&#10;            cursor: 'pointer',&#10;            fontSize: '16px'&#10;          }}&#10;        &gt;&#10;          ✕&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div style={{ marginBottom: '12px' }}&gt;&#10;        &lt;label&gt;Sayfa Boyutu Önayarları:&lt;/label&gt;&#10;        &lt;div style={{ display: 'flex', gap: '4px', marginTop: '4px' }}&gt;&#10;          {Object.keys(presets).map((preset) =&gt; (&#10;            &lt;button&#10;              key={preset}&#10;              onClick={() =&gt; {&#10;                applyPreset(preset as keyof typeof presets);&#10;              }}&#10;              style={{&#10;                padding: '4px 8px',&#10;                border: '1px solid #d1d1d1',&#10;                borderRadius: '2px',&#10;                background: 'white',&#10;                cursor: 'pointer',&#10;                fontSize: '10px'&#10;              }}&#10;            &gt;&#10;              {preset}&#10;            &lt;/button&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;label&gt;&#10;        Genişlik (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.pageWidth}&#10;          onChange={(e) =&gt; {&#10;            handleChange('pageWidth', Number(e.target.value));&#10;          }}&#10;          min=&quot;100&quot;&#10;          max=&quot;500&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Yükseklik (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.pageHeight}&#10;          onChange={(e) =&gt; {&#10;            handleChange('pageHeight', Number(e.target.value));&#10;          }}&#10;          min=&quot;100&quot;&#10;          max=&quot;700&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Üst Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginTop}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginTop', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Alt Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginBottom}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginBottom', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Sol Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginLeft}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginLeft', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;label&gt;&#10;        Sağ Kenar Boşluğu (mm):&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={localSettings.marginRight}&#10;          onChange={(e) =&gt; {&#10;            handleChange('marginRight', Number(e.target.value));&#10;          }}&#10;          min=&quot;5&quot;&#10;          max=&quot;50&quot;&#10;        /&gt;&#10;      &lt;/label&gt;&#10;&#10;      &lt;div style={{ marginTop: '12px', fontSize: '10px', color: '#666' }}&gt;&#10;        Ctrl+Enter: Yeni sayfa ekle&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="export interface PaginationSettings {&#10;  pageHeight: number; // mm&#10;  pageWidth: number; // mm&#10;  marginTop: number; // mm&#10;  marginBottom: number; // mm&#10;  marginLeft: number; // mm&#10;  marginRight: number; // mm&#10;}&#10;&#10;export const DEFAULT_PAGINATION_SETTINGS: PaginationSettings = {&#10;  pageHeight: 297, // A4 height&#10;  pageWidth: 210,  // A4 width&#10;  marginTop: 25,&#10;  marginBottom: 25,&#10;  marginLeft: 20,&#10;  marginRight: 20&#10;};&#10;&#10;export const PAGINATION_PRESETS: Record&lt;string, Partial&lt;PaginationSettings&gt;&gt; = {&#10;  A4: { pageWidth: 210, pageHeight: 297 },&#10;  A3: { pageWidth: 297, pageHeight: 420 },&#10;  Letter: { pageWidth: 216, pageHeight: 279 },&#10;  Legal: { pageWidth: 216, pageHeight: 356 }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>