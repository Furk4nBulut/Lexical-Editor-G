<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/Editor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/Editor.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import './styles.css';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import { HeadingNode } from '@lexical/rich-text';&#10;import { ListPlugin } from '@lexical/react/LexicalListPlugin';&#10;import { ListNode, ListItemNode } from '@lexical/list';&#10;import { ToolbarPlugin } from '../glyf-toolbar/Toolbar';&#10;import { BannerPlugin, BannerNode } from './plugins/banner/BannerPlugin';&#10;import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { $getRoot } from 'lexical';&#10;&#10;const theme = {&#10;  heading: {&#10;    h1: 'glyf-editor-h1',&#10;    h2: 'glyf-editor-h2',&#10;    h3: 'glyf-editor-h3'&#10;  },&#10;  text: {&#10;    bold: 'glyf-editor-bold',&#10;    italic: 'glyf-editor-italic',&#10;    underline: 'glyf-editor-underline',&#10;    strikethrough: 'glyf-editor-strikethrough',&#10;    underlineStrikethrough: 'glyf-editor-underlineStrikethrough'&#10;  },&#10;  banner: 'glyf-editor-banner'&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;// Kelime ve karakter sayacı bileşeni&#10;function WordCountPlugin({ onWordCountChange }: { onWordCountChange: (wordCount: number, charCount: number) =&gt; void }): null {&#10;  const [editor] = useLexicalComposerContext();&#10;&#10;  React.useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(({ editorState }) =&gt; {&#10;      editorState.read(() =&gt; {&#10;        const root = $getRoot();&#10;        const textContent = root.getTextContent();&#10;        const wordCount = textContent.trim() === '' ? 0 : textContent.trim().split(/\s+/).length;&#10;        const charCount = textContent.length;&#10;        onWordCountChange(wordCount, charCount);&#10;      });&#10;    });&#10;  }, [editor, onWordCountChange]);&#10;&#10;  return null;&#10;}&#10;&#10;interface EditorProps {&#10;  onWordCountChange?: (wordCount: number, charCount: number) =&gt; void;&#10;}&#10;&#10;export default function Editor({ onWordCountChange }: EditorProps): JSX.Element {&#10;  const [wordCount, setWordCount] = React.useState(0);&#10;  const [charCount, setCharCount] = React.useState(0);&#10;&#10;  const handleWordCountChange = React.useCallback((words: number, chars: number) =&gt; {&#10;    setWordCount(words);&#10;    setCharCount(chars);&#10;    onWordCountChange?.(words, chars);&#10;  }, [onWordCountChange]);&#10;&#10;  const initialConfig = {&#10;    namespace: 'GlyfEditor',&#10;    theme,&#10;    onError,&#10;    nodes: [HeadingNode, ListNode, ListItemNode, BannerNode]&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-container&quot;&gt;&#10;      &lt;div className=&quot;a4-page&quot;&gt;&#10;        &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;          &lt;div className=&quot;toolbar-wrapper&quot;&gt;&#10;            &lt;ToolbarPlugin /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;a4-content&quot;&gt;&#10;            &lt;RichTextPlugin&#10;              contentEditable={&lt;ContentEditable className=&quot;contentEditable&quot; /&gt;}&#10;              placeholder={&lt;div className=&quot;placeholder&quot;&gt;Yazmaya başlayın...&lt;/div&gt;}&#10;              ErrorBoundary={LexicalErrorBoundary}&#10;            /&gt;&#10;            &lt;BannerPlugin /&gt;&#10;            &lt;ListPlugin /&gt;&#10;            &lt;HistoryPlugin /&gt;&#10;            &lt;WordCountPlugin onWordCountChange={handleWordCountChange} /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/LexicalComposer&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import './styles.css';&#10;import { LexicalComposer } from '@lexical/react/LexicalComposer';&#10;import { ContentEditable } from '@lexical/react/LexicalContentEditable';&#10;import { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';&#10;import LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';&#10;import { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';&#10;import { HeadingNode } from '@lexical/rich-text';&#10;import { ListPlugin } from '@lexical/react/LexicalListPlugin';&#10;import { ListNode, ListItemNode } from '@lexical/list';&#10;import { ToolbarPlugin } from '../glyf-toolbar/Toolbar';&#10;import { BannerPlugin, BannerNode } from './plugins/banner/BannerPlugin';&#10;import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { $getRoot } from 'lexical';&#10;&#10;const theme = {&#10;  heading: {&#10;    h1: 'glyf-editor-h1',&#10;    h2: 'glyf-editor-h2',&#10;    h3: 'glyf-editor-h3'&#10;  },&#10;  text: {&#10;    bold: 'glyf-editor-bold',&#10;    italic: 'glyf-editor-italic',&#10;    underline: 'glyf-editor-underline',&#10;    strikethrough: 'glyf-editor-strikethrough',&#10;    underlineStrikethrough: 'glyf-editor-underlineStrikethrough'&#10;  },&#10;  banner: 'glyf-editor-banner'&#10;};&#10;&#10;function onError(error: Error): void {&#10;  console.error(error);&#10;}&#10;&#10;// Kelime ve karakter sayacı bileşeni&#10;function WordCountPlugin({ onWordCountChange }: { onWordCountChange: (wordCount: number, charCount: number) =&gt; void }): null {&#10;  const [editor] = useLexicalComposerContext();&#10;&#10;  React.useEffect(() =&gt; {&#10;    return editor.registerUpdateListener(({ editorState }) =&gt; {&#10;      editorState.read(() =&gt; {&#10;        const root = $getRoot();&#10;        const textContent = root.getTextContent();&#10;        const wordCount = textContent.trim() === '' ? 0 : textContent.trim().split(/\s+/).length;&#10;        const charCount = textContent.length;&#10;        onWordCountChange(wordCount, charCount);&#10;      });&#10;    });&#10;  }, [editor, onWordCountChange]);&#10;&#10;  return null;&#10;}&#10;&#10;interface EditorProps {&#10;  onWordCountChange?: (wordCount: number, charCount: number) =&gt; void;&#10;}&#10;&#10;export default function Editor({ onWordCountChange }: EditorProps): JSX.Element {&#10;  const handleWordCountChange = React.useCallback((words: number, chars: number) =&gt; {&#10;    onWordCountChange?.(words, chars);&#10;  }, [onWordCountChange]);&#10;&#10;  const initialConfig = {&#10;    namespace: 'GlyfEditor',&#10;    theme,&#10;    onError,&#10;    nodes: [HeadingNode, ListNode, ListItemNode, BannerNode]&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;editor-container&quot;&gt;&#10;      &lt;div className=&quot;a4-page&quot;&gt;&#10;        &lt;LexicalComposer initialConfig={initialConfig}&gt;&#10;          &lt;div className=&quot;toolbar-wrapper&quot;&gt;&#10;            &lt;ToolbarPlugin /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;a4-content&quot;&gt;&#10;            &lt;RichTextPlugin&#10;              contentEditable={&lt;ContentEditable className=&quot;contentEditable&quot; /&gt;}&#10;              placeholder={&lt;div className=&quot;placeholder&quot;&gt;Yazmaya başlayın...&lt;/div&gt;}&#10;              ErrorBoundary={LexicalErrorBoundary}&#10;            /&gt;&#10;            &lt;BannerPlugin /&gt;&#10;            &lt;ListPlugin /&gt;&#10;            &lt;HistoryPlugin /&gt;&#10;            &lt;WordCountPlugin onWordCountChange={handleWordCountChange} /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/LexicalComposer&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/plugins/banner/styles.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/plugins/banner/styles.css" />
              <option name="originalContent" value=".colorButtonInner {&#10;    height: 24px;&#10;    width: 24px;&#10;}&#10;&#10;.popoverContent {&#10;  border-radius: 4px;&#10;  padding: 20px;&#10;  width: 180px;&#10;  background-color: white;&#10;  box-shadow: hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px;&#10;  animation-duration: 400ms;&#10;  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);&#10;  will-change: transform, opacity;&#10;}&#10;.popoverContent[data-state='open'][data-side='top'] {&#10;  animation-name: slideDownAndFade;&#10;}&#10;.popoverContent[data-state='open'][data-side='right'] {&#10;  animation-name: slideLeftAndFade;&#10;}&#10;.popoverContent[data-state='open'][data-side='bottom'] {&#10;  animation-name: slideUpAndFade;&#10;}&#10;.popoverContent[data-state='open'][data-side='left'] {&#10;  animation-name: slideRightAndFade;&#10;}&#10;&#10;.popoverClose {&#10;  font-family: inherit;&#10;  border-radius: 100%;&#10;  height: 25px;&#10;  width: 25px;&#10;  display: inline-flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  position: absolute;&#10;  top: 5px;&#10;  right: 5px;&#10;  background-color: #242424;&#10;}&#10;&#10;.iconButton {&#10;  font-family: inherit;&#10;  border-radius: 100%;&#10;  display: inline-flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;&#10;}&#10;&#10;@keyframes slideUpAndFade {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(2px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;@keyframes slideRightAndFade {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateX(-2px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateX(0);&#10;  }&#10;}&#10;&#10;@keyframes slideDownAndFade {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(-2px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;@keyframes slideLeftAndFade {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateX(2px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateX(0);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="/* Banner plugin stilleri - global theme ile uyumlu */&#10;.colorButtonInner {&#10;    height: 24px;&#10;    width: 24px;&#10;    border-radius: 4px;&#10;    border: 1px solid var(--ms-gray-50);&#10;    transition: all 0.1s ease-in-out;&#10;}&#10;&#10;.colorButtonInner:hover {&#10;    border-color: var(--ms-gray-70);&#10;    transform: scale(1.05);&#10;}&#10;&#10;/* Popover content - Microsoft Word benzeri tasarım */&#10;.popoverContent {&#10;    border-radius: 8px;&#10;    padding: 16px;&#10;    width: 200px;&#10;    background: white;&#10;    border: 1px solid var(--ms-gray-40);&#10;    box-shadow: &#10;        0 4px 8px rgba(0, 0, 0, 0.1),&#10;        0 8px 20px rgba(0, 0, 0, 0.05);&#10;    animation-duration: 200ms;&#10;    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);&#10;    will-change: transform, opacity;&#10;    font-family: inherit;&#10;}&#10;&#10;.popoverContent[data-state='open'][data-side='top'] {&#10;    animation-name: slideDownAndFade;&#10;}&#10;&#10;.popoverContent[data-state='open'][data-side='right'] {&#10;    animation-name: slideLeftAndFade;&#10;}&#10;&#10;.popoverContent[data-state='open'][data-side='bottom'] {&#10;    animation-name: slideUpAndFade;&#10;}&#10;&#10;.popoverContent[data-state='open'][data-side='left'] {&#10;    animation-name: slideRightAndFade;&#10;}&#10;&#10;/* Close button - theme ile uyumlu */&#10;.popoverClose {&#10;    font-family: inherit;&#10;    border-radius: 4px;&#10;    height: 24px;&#10;    width: 24px;&#10;    display: inline-flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    position: absolute;&#10;    top: 8px;&#10;    right: 8px;&#10;    background: transparent;&#10;    color: var(--ms-gray-90);&#10;    border: 1px solid transparent;&#10;    cursor: pointer;&#10;    transition: all 0.1s ease-in-out;&#10;}&#10;&#10;.popoverClose:hover {&#10;    background: var(--ms-gray-20);&#10;    border-color: var(--ms-gray-40);&#10;    color: var(--ms-gray-110);&#10;}&#10;&#10;.popoverClose:active {&#10;    background: var(--ms-gray-30);&#10;}&#10;&#10;/* Icon button - theme ile uyumlu */&#10;.iconButton {&#10;    font-family: inherit;&#10;    border-radius: 4px;&#10;    display: inline-flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    min-width: 32px;&#10;    height: 32px;&#10;    padding: 6px;&#10;    background: transparent;&#10;    color: var(--ms-gray-110);&#10;    border: 1px solid var(--ms-gray-50);&#10;    cursor: pointer;&#10;    transition: all 0.1s ease-in-out;&#10;}&#10;&#10;.iconButton:hover {&#10;    background: var(--ms-gray-10);&#10;    border-color: var(--ms-gray-60);&#10;    color: var(--ms-gray-120);&#10;}&#10;&#10;.iconButton:active {&#10;    background: var(--ms-gray-20);&#10;    transform: translateY(0.5px);&#10;}&#10;&#10;.iconButton:focus {&#10;    outline: 2px solid var(--ms-blue);&#10;    outline-offset: 1px;&#10;}&#10;&#10;/* Color picker grid */&#10;.colorGrid {&#10;    display: grid;&#10;    grid-template-columns: repeat(6, 1fr);&#10;    gap: 8px;&#10;    margin-top: 8px;&#10;}&#10;&#10;.colorOption {&#10;    width: 24px;&#10;    height: 24px;&#10;    border-radius: 4px;&#10;    border: 2px solid var(--ms-gray-40);&#10;    cursor: pointer;&#10;    transition: all 0.1s ease-in-out;&#10;}&#10;&#10;.colorOption:hover {&#10;    transform: scale(1.1);&#10;    border-color: var(--ms-gray-70);&#10;}&#10;&#10;.colorOption:focus {&#10;    outline: 2px solid var(--ms-blue);&#10;    outline-offset: 2px;&#10;}&#10;&#10;.colorOption.selected {&#10;    border-color: var(--ms-blue);&#10;    box-shadow: 0 0 0 2px var(--ms-blue);&#10;}&#10;&#10;/* Animation keyframes */&#10;@keyframes slideUpAndFade {&#10;    from {&#10;        opacity: 0;&#10;        transform: translateY(2px);&#10;    }&#10;    to {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;    }&#10;}&#10;&#10;@keyframes slideRightAndFade {&#10;    from {&#10;        opacity: 0;&#10;        transform: translateX(-2px);&#10;    }&#10;    to {&#10;        opacity: 1;&#10;        transform: translateX(0);&#10;    }&#10;}&#10;&#10;@keyframes slideDownAndFade {&#10;    from {&#10;        opacity: 0;&#10;        transform: translateY(-2px);&#10;    }&#10;    to {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;    }&#10;}&#10;&#10;@keyframes slideLeftAndFade {&#10;    from {&#10;        opacity: 0;&#10;        transform: translateX(2px);&#10;    }&#10;    to {&#10;        opacity: 1;&#10;        transform: translateX(0);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-editor/styles.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-editor/styles.css" />
              <option name="originalContent" value="/* Microsoft Word benzeri editör container - geliştirilmiş A4 deneyimi */&#10;.editor-container {&#10;    display: flex;&#10;    justify-content: center;&#10;    background: transparent;&#10;    min-height: auto;&#10;    padding: 20px 40px 40px 40px;&#10;    font-family: inherit;&#10;    width: 100%;&#10;    max-width: none;&#10;}&#10;&#10;/* A4 sayfası tasarımı - daha gerçekçi görünüm */&#10;.a4-page {&#10;    width: 210mm;&#10;    min-height: 297mm;&#10;    background: white;&#10;    box-shadow:&#10;        0 0 0 1px var(--ms-gray-40),&#10;        0 4px 12px rgba(0, 0, 0, 0.08),&#10;        0 8px 24px rgba(0, 0, 0, 0.05);&#10;    margin: 0 auto;&#10;    position: relative;&#10;    border-radius: 3px;&#10;    overflow: visible;&#10;    transition: box-shadow 0.2s ease-in-out;&#10;    display: flex;&#10;    flex-direction: column;&#10;}&#10;&#10;.a4-page:hover {&#10;    box-shadow:&#10;        0 0 0 1px var(--ms-gray-50),&#10;        0 6px 16px rgba(0, 0, 0, 0.12),&#10;        0 12px 32px rgba(0, 0, 0, 0.08);&#10;}&#10;&#10;/* A4 içerik alanı */&#10;.a4-content {&#10;    flex: 1;&#10;    position: relative;&#10;    min-height: calc(297mm - 120px); /* Toolbar ve stats için alan */&#10;}&#10;&#10;/* Toolbar wrapper - daha iyi konumlandırma */&#10;.toolbar-wrapper {&#10;    position: sticky;&#10;    top: 0;&#10;    z-index: 100;&#10;    background: var(--ms-gray-10);&#10;    border-bottom: 1px solid var(--ms-gray-40);&#10;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);&#10;    border-radius: 3px 3px 0 0;&#10;}&#10;&#10;/* Ana editör alanı - geliştirilmiş tipografi */&#10;.contentEditable {&#10;    width: 100%;&#10;    min-height: calc(297mm - 140px);&#10;    padding: 25mm 20mm 20mm 20mm;&#10;    border: none;&#10;    outline: none;&#10;    font-family: 'Calibri', 'Segoe UI', system-ui, sans-serif;&#10;    font-size: 11pt;&#10;    line-height: 1.15;&#10;    color: var(--ms-gray-110);&#10;    background: transparent;&#10;    overflow: visible;&#10;    resize: none;&#10;    text-align: left;&#10;    word-wrap: break-word;&#10;    hyphens: auto;&#10;    caret-color: var(--ms-blue);&#10;}&#10;&#10;.contentEditable:focus {&#10;    outline: none;&#10;}&#10;&#10;/* Placeholder - daha professional */&#10;.placeholder {&#10;    position: absolute;&#10;    top: 25mm;&#10;    left: 20mm;&#10;    color: var(--ms-gray-70);&#10;    pointer-events: none;&#10;    font-family: 'Calibri', 'Segoe UI', system-ui, sans-serif;&#10;    font-size: 11pt;&#10;    font-style: italic;&#10;    opacity: 0.8;&#10;    user-select: none;&#10;}&#10;&#10;/* Sayfa numarası - Word benzeri */&#10;.page-number {&#10;    position: absolute;&#10;    bottom: 15mm;&#10;    left: 50%;&#10;    transform: translateX(-50%);&#10;    font-family: 'Calibri', 'Segoe UI', system-ui, sans-serif;&#10;    font-size: 10pt;&#10;    color: var(--ms-gray-80);&#10;    background: white;&#10;    padding: 2px 8px;&#10;    border-radius: 2px;&#10;    user-select: none;&#10;    z-index: 10;&#10;}&#10;&#10;/* Belge istatistikleri - alt çubuğu */&#10;.document-stats {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    align-items: center;&#10;    background: var(--ms-gray-10);&#10;    border-top: 1px solid var(--ms-gray-40);&#10;    padding: 6px 16px;&#10;    font-family: 'Segoe UI', system-ui, sans-serif;&#10;    font-size: 10px;&#10;    color: var(--ms-gray-90);&#10;    border-radius: 0 0 3px 3px;&#10;    gap: 16px;&#10;}&#10;&#10;.word-count,&#10;.char-count {&#10;    display: flex;&#10;    align-items: center;&#10;    gap: 4px;&#10;    font-weight: 500;&#10;}&#10;&#10;.word-count::before {&#10;    content: &quot;&quot;;&#10;    font-size: 12px;&#10;}&#10;&#10;.char-count::before {&#10;    content: &quot;&quot;;&#10;    font-size: 12px;&#10;}&#10;&#10;/* Text formatting - geliştirilmiş stiller */&#10;.glyf-editor-bold {&#10;    font-weight: 700;&#10;}&#10;&#10;.glyf-editor-italic {&#10;    font-style: italic;&#10;}&#10;&#10;.glyf-editor-underline {&#10;    text-decoration: underline;&#10;    text-decoration-thickness: 1px;&#10;    text-underline-offset: 2px;&#10;}&#10;&#10;.glyf-editor-strikethrough {&#10;    text-decoration: line-through;&#10;    text-decoration-thickness: 1px;&#10;}&#10;&#10;.glyf-editor-underlineStrikethrough {&#10;    text-decoration: underline line-through;&#10;    text-decoration-thickness: 1px;&#10;    text-underline-offset: 2px;&#10;}&#10;&#10;/* Heading styles - Word'ün tam kopyası */&#10;.glyf-editor-h1 {&#10;    font-family: 'Calibri Light', 'Calibri', 'Segoe UI', sans-serif;&#10;    font-size: 16pt;&#10;    font-weight: 300;&#10;    color: var(--ms-blue);&#10;    margin: 0 0 8pt 0;&#10;    line-height: 1.15;&#10;    page-break-after: avoid;&#10;}&#10;&#10;.glyf-editor-h2 {&#10;    font-family: 'Calibri Light', 'Calibri', 'Segoe UI', sans-serif;&#10;    font-size: 13pt;&#10;    font-weight: 300;&#10;    color: var(--ms-blue);&#10;    margin: 10pt 0 6pt 0;&#10;    line-height: 1.15;&#10;    page-break-after: avoid;&#10;}&#10;&#10;.glyf-editor-h3 {&#10;    font-family: 'Calibri', 'Segoe UI', sans-serif;&#10;    font-size: 12pt;&#10;    font-weight: 600;&#10;    color: var(--ms-blue-active);&#10;    margin: 10pt 0 6pt 0;&#10;    line-height: 1.15;&#10;    page-break-after: avoid;&#10;}&#10;&#10;/* Paragraph spacing - Word standardı */&#10;p {&#10;    margin: 0 0 8pt 0;&#10;    font-family: 'Calibri', 'Segoe UI', system-ui, sans-serif;&#10;    font-size: 11pt;&#10;    line-height: 1.15;&#10;    text-align: left;&#10;    color: var(--ms-gray-110);&#10;    orphans: 2;&#10;    widows: 2;&#10;}&#10;&#10;/* List styles - Word benzeri girintiler */&#10;ul, ol {&#10;    margin: 0 0 8pt 0;&#10;    padding-left: 18pt;&#10;    font-family: 'Calibri', 'Segoe UI', system-ui, sans-serif;&#10;    font-size: 11pt;&#10;    line-height: 1.15;&#10;}&#10;&#10;li {&#10;    margin: 0 0 4pt 0;&#10;    padding: 0;&#10;    color: var(--ms-gray-110);&#10;}&#10;&#10;/* Banner styling - daha modern */&#10;.glyf-editor-banner {&#10;    margin: 12pt 0;&#10;    padding: 12pt 16pt;&#10;    border-left: 4px solid var(--ms-blue);&#10;    background: linear-gradient(135deg, var(--ms-gray-10) 0%, var(--ms-gray-20) 100%);&#10;    border-radius: 0 6px 6px 0;&#10;    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);&#10;    color: var(--ms-gray-110);&#10;    position: relative;&#10;}&#10;&#10;.glyf-editor-banner::before {&#10;    content: '';&#10;    position: absolute;&#10;    left: -4px;&#10;    top: 0;&#10;    bottom: 0;&#10;    width: 4px;&#10;    background: linear-gradient(to bottom, var(--ms-blue), var(--ms-blue-hover));&#10;}&#10;&#10;/* Selection styling */&#10;::selection {&#10;    background-color: var(--ms-blue);&#10;    color: white;&#10;}&#10;&#10;::-moz-selection {&#10;    background-color: var(--ms-blue);&#10;    color: white;&#10;}&#10;&#10;/* Scrollbar - daha ince ve elegant */&#10;.contentEditable::-webkit-scrollbar {&#10;    width: 12px;&#10;}&#10;&#10;.contentEditable::-webkit-scrollbar-track {&#10;    background: transparent;&#10;}&#10;&#10;.contentEditable::-webkit-scrollbar-thumb {&#10;    background: var(--ms-gray-50);&#10;    border-radius: 6px;&#10;    border: 2px solid transparent;&#10;    background-clip: content-box;&#10;}&#10;&#10;.contentEditable::-webkit-scrollbar-thumb:hover {&#10;    background: var(--ms-gray-60);&#10;    background-clip: content-box;&#10;}&#10;&#10;/* Print optimizasyonu */&#10;@media print {&#10;    .editor-container {&#10;        background: white;&#10;        padding: 0;&#10;    }&#10;&#10;    .a4-page {&#10;        box-shadow: none;&#10;        border-radius: 0;&#10;        margin: 0;&#10;        width: 100%;&#10;        min-height: auto;&#10;    }&#10;&#10;    .toolbar-wrapper,&#10;    .document-stats,&#10;    .page-number {&#10;        display: none;&#10;    }&#10;&#10;    .contentEditable {&#10;        font-size: 12pt;&#10;        line-height: 1.5;&#10;        padding: 20mm;&#10;    }&#10;&#10;    .a4-content {&#10;        min-height: auto;&#10;    }&#10;}&#10;&#10;/* Responsive design - daha iyi mobile deneyim */&#10;@media (max-width: 1200px) {&#10;    .editor-container {&#10;        padding: 16px 24px 32px 24px;&#10;    }&#10;&#10;    .a4-page {&#10;        width: min(190mm, 100%);&#10;    }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;    .editor-container {&#10;        padding: 10px 16px 20px 16px;&#10;    }&#10;&#10;    .a4-page {&#10;        width: 100%;&#10;        min-width: 320px;&#10;        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;    }&#10;&#10;    .contentEditable {&#10;        padding: 15mm 10mm 15mm 10mm;&#10;        font-size: 12pt;&#10;        line-height: 1.2;&#10;        min-height: calc(100vh - 200px);&#10;    }&#10;&#10;    .placeholder {&#10;        left: 10mm;&#10;        top: 15mm;&#10;        font-size: 12pt;&#10;    }&#10;&#10;    .document-stats {&#10;        flex-direction: column;&#10;        gap: 4px;&#10;        padding: 8px 12px;&#10;    }&#10;&#10;    .page-number {&#10;        bottom: 10mm;&#10;        font-size: 9pt;&#10;    }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;    .editor-container {&#10;        padding: 8px 12px 16px 12px;&#10;    }&#10;&#10;    .contentEditable {&#10;        padding: 12mm 8mm 12mm 8mm;&#10;        min-height: calc(100vh - 180px);&#10;    }&#10;&#10;    .placeholder {&#10;        left: 8mm;&#10;        top: 12mm;&#10;    }&#10;&#10;    .document-stats {&#10;        font-size: 9px;&#10;        padding: 6px 10px;&#10;    }&#10;&#10;    .page-number {&#10;        bottom: 8mm;&#10;        font-size: 8pt;&#10;    }&#10;}&#10;&#10;/* Focus ve accessibility */&#10;.contentEditable:focus-visible {&#10;    outline: 2px solid var(--ms-blue);&#10;    outline-offset: -2px;&#10;}&#10;&#10;/* Animasyonlar */&#10;.a4-page * {&#10;    transition: all 0.1s ease-out;&#10;}&#10;&#10;/* Kağıt texture efekti (opsiyonel) */&#10;.a4-page::before {&#10;    content: '';&#10;    position: absolute;&#10;    top: 0;&#10;    left: 0;&#10;    right: 0;&#10;    bottom: 0;&#10;    background:&#10;        radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.01) 0%, transparent 50%),&#10;        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.01) 0%, transparent 50%);&#10;    pointer-events: none;&#10;    z-index: 1;&#10;}&#10;" />
              <option name="updatedContent" value="/* Sade ve temiz A4 Word benzeri tasarım */&#10;.editor-container {&#10;    display: flex;&#10;    justify-content: center;&#10;    background: #f3f2f1;&#10;    min-height: 100vh;&#10;    padding: 20px;&#10;    font-family: 'Segoe UI', system-ui, sans-serif;&#10;}&#10;&#10;/* Temiz A4 sayfa tasarımı */&#10;.a4-page {&#10;    width: 210mm;&#10;    min-height: 297mm;&#10;    background: white;&#10;    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;    margin: 0 auto;&#10;    display: flex;&#10;    flex-direction: column;&#10;    border-radius: 2px;&#10;}&#10;&#10;/* A4 içerik alanı - sade */&#10;.a4-content {&#10;    flex: 1;&#10;    position: relative;&#10;}&#10;&#10;/* Toolbar - minimal tasarım */&#10;.toolbar-wrapper {&#10;    background: #fafafa;&#10;    border-bottom: 1px solid #e0e0e0;&#10;    border-radius: 2px 2px 0 0;&#10;}&#10;&#10;/* Ana yazı alanı - Word benzeri */&#10;.contentEditable {&#10;    width: 100%;&#10;    min-height: calc(297mm - 60px);&#10;    padding: 25mm 20mm;&#10;    border: none;&#10;    outline: none;&#10;    font-family: 'Calibri', 'Times New Roman', serif;&#10;    font-size: 11pt;&#10;    line-height: 1.15;&#10;    color: #000;&#10;    background: white;&#10;    caret-color: #0078d4;&#10;}&#10;&#10;.contentEditable:focus {&#10;    outline: none;&#10;}&#10;&#10;/* Placeholder - sade */&#10;.placeholder {&#10;    position: absolute;&#10;    top: 25mm;&#10;    left: 20mm;&#10;    color: #999;&#10;    pointer-events: none;&#10;    font-family: 'Calibri', serif;&#10;    font-size: 11pt;&#10;    font-style: italic;&#10;}&#10;&#10;/* Text formatting - basit ve etkili */&#10;.glyf-editor-bold {&#10;    font-weight: 700;&#10;}&#10;&#10;.glyf-editor-italic {&#10;    font-style: italic;&#10;}&#10;&#10;.glyf-editor-underline {&#10;    text-decoration: underline;&#10;}&#10;&#10;.glyf-editor-strikethrough {&#10;    text-decoration: line-through;&#10;}&#10;&#10;.glyf-editor-underlineStrikethrough {&#10;    text-decoration: underline line-through;&#10;}&#10;&#10;/* Başlık stilleri - Word'ün basit versiyonu */&#10;.glyf-editor-h1 {&#10;    font-family: 'Calibri', sans-serif;&#10;    font-size: 16pt;&#10;    font-weight: 600;&#10;    color: #2F5496;&#10;    margin: 0 0 8pt 0;&#10;    line-height: 1.2;&#10;}&#10;&#10;.glyf-editor-h2 {&#10;    font-family: 'Calibri', sans-serif;&#10;    font-size: 13pt;&#10;    font-weight: 600;&#10;    color: #2F5496;&#10;    margin: 8pt 0 6pt 0;&#10;    line-height: 1.2;&#10;}&#10;&#10;.glyf-editor-h3 {&#10;    font-family: 'Calibri', sans-serif;&#10;    font-size: 12pt;&#10;    font-weight: 600;&#10;    color: #1F3763;&#10;    margin: 6pt 0 4pt 0;&#10;    line-height: 1.2;&#10;}&#10;&#10;/* Paragraf - basit Word spacing */&#10;p {&#10;    margin: 0 0 8pt 0;&#10;    font-family: 'Calibri', serif;&#10;    font-size: 11pt;&#10;    line-height: 1.15;&#10;    color: #000;&#10;}&#10;&#10;/* Liste stilleri - minimal */&#10;ul, ol {&#10;    margin: 0 0 8pt 0;&#10;    padding-left: 18pt;&#10;    font-family: 'Calibri', serif;&#10;    font-size: 11pt;&#10;    line-height: 1.15;&#10;}&#10;&#10;li {&#10;    margin: 0 0 2pt 0;&#10;    padding: 0;&#10;    color: #000;&#10;}&#10;&#10;/* Banner - sade tasarım */&#10;.glyf-editor-banner {&#10;    margin: 8pt 0;&#10;    padding: 8pt 12pt;&#10;    border-left: 3px solid #0078d4;&#10;    background: #f8f9fa;&#10;    border-radius: 0 3px 3px 0;&#10;}&#10;&#10;/* Selection - Word mavi */&#10;::selection {&#10;    background-color: #0078d4;&#10;    color: white;&#10;}&#10;&#10;/* Scrollbar - minimal */&#10;.contentEditable::-webkit-scrollbar {&#10;    width: 8px;&#10;}&#10;&#10;.contentEditable::-webkit-scrollbar-track {&#10;    background: transparent;&#10;}&#10;&#10;.contentEditable::-webkit-scrollbar-thumb {&#10;    background: #ccc;&#10;    border-radius: 4px;&#10;}&#10;&#10;.contentEditable::-webkit-scrollbar-thumb:hover {&#10;    background: #999;&#10;}&#10;&#10;/* Print için temizlik */&#10;@media print {&#10;    .editor-container {&#10;        background: white;&#10;        padding: 0;&#10;    }&#10;    &#10;    .a4-page {&#10;        box-shadow: none;&#10;        margin: 0;&#10;        border-radius: 0;&#10;    }&#10;    &#10;    .toolbar-wrapper {&#10;        display: none;&#10;    }&#10;    &#10;    .contentEditable {&#10;        padding: 20mm;&#10;        font-size: 12pt;&#10;        line-height: 1.5;&#10;    }&#10;}&#10;&#10;/* Responsive - mobil için */&#10;@media (max-width: 768px) {&#10;    .editor-container {&#10;        padding: 10px;&#10;    }&#10;    &#10;    .a4-page {&#10;        width: 100%;&#10;        min-width: 300px;&#10;    }&#10;    &#10;    .contentEditable {&#10;        padding: 15mm 10mm;&#10;        font-size: 12pt;&#10;    }&#10;    &#10;    .placeholder {&#10;        left: 10mm;&#10;        top: 15mm;&#10;        font-size: 12pt;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-toolbar/Toolbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-toolbar/Toolbar.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import './styles.css';&#10;import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { $setBlocksType_experimental } from '@lexical/selection';&#10;import { $isRangeSelection, $getSelection, type TextFormatType } from 'lexical';&#10;import { $createHeadingNode } from '@lexical/rich-text';&#10;import { INSERT_ORDERED_LIST_COMMAND, INSERT_UNORDERED_LIST_COMMAND } from '@lexical/list';&#10;import { INSERT_BANNER_COMMAND } from '../glyf-editor/plugins/banner/BannerPlugin';&#10;import * as Toolbar from '@radix-ui/react-toolbar';&#10;import {&#10;  StrikethroughIcon,&#10;  FontBoldIcon,&#10;  FontItalicIcon,&#10;  UnderlineIcon,&#10;  PlusCircledIcon&#10;} from '@radix-ui/react-icons';&#10;import { OrderedListIcon, UnorderedListIcon } from './icons';&#10;import { BannerColorPickerPlugin } from '../glyf-editor/plugins/banner/BannerColorPickerPlugin';&#10;&#10;interface ToolbarButtonProps {&#10;  onClick: React.MouseEventHandler&lt;HTMLButtonElement&gt; | undefined;&#10;  children: React.ReactNode;&#10;  title?: string;&#10;  dataAttribute?: string;&#10;  className?: string;&#10;}&#10;&#10;function ToolbarButton(props: ToolbarButtonProps): JSX.Element {&#10;  return (&#10;    &lt;Toolbar.Button&#10;      className={`toolbarButton ${props.className || ''}`}&#10;      onClick={props.onClick}&#10;      title={props.title}&#10;      {...(props.dataAttribute ? { [props.dataAttribute]: true } : {})}&#10;    &gt;&#10;      {props.children}&#10;    &lt;/Toolbar.Button&gt;&#10;  );&#10;}&#10;&#10;function TextFormatToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const getIcon = (format: TextFormatType): JSX.Element | null =&gt; {&#10;    switch (format) {&#10;      case 'bold':&#10;        return &lt;FontBoldIcon /&gt;;&#10;      case 'italic':&#10;        return &lt;FontItalicIcon /&gt;;&#10;      case 'strikethrough':&#10;        return &lt;StrikethroughIcon /&gt;;&#10;      case 'underline':&#10;        return &lt;UnderlineIcon /&gt;;&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;&#10;  const getTitle = (format: TextFormatType): string =&gt; {&#10;    switch (format) {&#10;      case 'bold':&#10;        return 'Kalın (Ctrl+B)';&#10;      case 'italic':&#10;        return 'İtalik (Ctrl+I)';&#10;      case 'underline':&#10;        return 'Alt çizgi (Ctrl+U)';&#10;      case 'strikethrough':&#10;        return 'Üstü çizili';&#10;      default:&#10;        return '';&#10;    }&#10;  };&#10;&#10;  const onClick = (format: TextFormatType): void =&gt; {&#10;    editor.update(() =&gt; {&#10;      const selection = $getSelection();&#10;      if ($isRangeSelection(selection)) {&#10;        selection.formatText(format);&#10;      }&#10;    });&#10;  };&#10;&#10;  const supportedTextFormats: TextFormatType[] = ['bold', 'italic', 'underline', 'strikethrough'];&#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      {supportedTextFormats.map((format) =&gt; (&#10;        &lt;ToolbarButton&#10;          key={format}&#10;          onClick={() =&gt; onClick(format)}&#10;          title={getTitle(format)}&#10;          dataAttribute={`data-format`}&#10;        &gt;&#10;          {getIcon(format)}&#10;        &lt;/ToolbarButton&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;type HeadingTag = 'h1' | 'h2' | 'h3';&#10;function HeadingToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const headingTags: HeadingTag[] = ['h1', 'h2', 'h3'];&#10;&#10;  const getTitle = (tag: HeadingTag): string =&gt; {&#10;    switch (tag) {&#10;      case 'h1':&#10;        return 'Başlık 1';&#10;      case 'h2':&#10;        return 'Başlık 2';&#10;      case 'h3':&#10;        return 'Başlık 3';&#10;      default:&#10;        return '';&#10;    }&#10;  };&#10;&#10;  const onClick = (tag: HeadingTag): void =&gt; {&#10;    editor.update(() =&gt; {&#10;      const selection = $getSelection();&#10;      if ($isRangeSelection(selection)) {&#10;        $setBlocksType_experimental(selection, () =&gt; $createHeadingNode(tag));&#10;      }&#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      {headingTags.map((tag) =&gt; (&#10;        &lt;ToolbarButton&#10;          onClick={() =&gt; onClick(tag)}&#10;          key={tag}&#10;          title={getTitle(tag)}&#10;          dataAttribute=&quot;data-heading&quot;&#10;        &gt;&#10;          {tag.toUpperCase()}&#10;        &lt;/ToolbarButton&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function ListToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const onClick = (tag: 'ol' | 'ul'): void =&gt; {&#10;    if (tag === 'ol') {&#10;      editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined);&#10;      return;&#10;    }&#10;    editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      &lt;ToolbarButton&#10;        onClick={() =&gt; onClick('ol')}&#10;        title=&quot;Numaralı liste&quot;&#10;        dataAttribute=&quot;data-list&quot;&#10;      &gt;&#10;        &lt;OrderedListIcon /&gt;&#10;      &lt;/ToolbarButton&gt;&#10;      &lt;ToolbarButton&#10;        onClick={() =&gt; onClick('ul')}&#10;        title=&quot;Madde işaretli liste&quot;&#10;        dataAttribute=&quot;data-list&quot;&#10;      &gt;&#10;        &lt;UnorderedListIcon /&gt;&#10;      &lt;/ToolbarButton&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function BannerToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const onClick = (e: React.MouseEvent): void =&gt; {&#10;    editor.dispatchCommand(INSERT_BANNER_COMMAND, undefined);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      &lt;ToolbarButton&#10;        onClick={onClick}&#10;        title=&quot;Banner ekle&quot;&#10;        dataAttribute=&quot;data-banner&quot;&#10;      &gt;&#10;        &lt;PlusCircledIcon /&gt;&#10;        Banner&#10;      &lt;/ToolbarButton&gt;&#10;      &lt;BannerColorPickerPlugin /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export function ToolbarPlugin(): JSX.Element {&#10;  return (&#10;    &lt;Toolbar.Root className=&quot;toolbarRoot&quot;&gt;&#10;      &lt;TextFormatToolbarPlugin /&gt;&#10;      &lt;HeadingToolbarPlugin /&gt;&#10;      &lt;ListToolbarPlugin /&gt;&#10;      &lt;BannerToolbarPlugin /&gt;&#10;    &lt;/Toolbar.Root&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import './styles.css';&#10;import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';&#10;import { $setBlocksType_experimental } from '@lexical/selection';&#10;import { $isRangeSelection, $getSelection, type TextFormatType } from 'lexical';&#10;import { $createHeadingNode } from '@lexical/rich-text';&#10;import { INSERT_ORDERED_LIST_COMMAND, INSERT_UNORDERED_LIST_COMMAND } from '@lexical/list';&#10;import { INSERT_BANNER_COMMAND } from '../glyf-editor/plugins/banner/BannerPlugin';&#10;import * as Toolbar from '@radix-ui/react-toolbar';&#10;import {&#10;  StrikethroughIcon,&#10;  FontBoldIcon,&#10;  FontItalicIcon,&#10;  UnderlineIcon,&#10;  PlusCircledIcon&#10;} from '@radix-ui/react-icons';&#10;import { OrderedListIcon, UnorderedListIcon } from './icons';&#10;import { BannerColorPickerPlugin } from '../glyf-editor/plugins/banner/BannerColorPickerPlugin';&#10;&#10;interface ToolbarButtonProps {&#10;  onClick: React.MouseEventHandler&lt;HTMLButtonElement&gt; | undefined;&#10;  children: React.ReactNode;&#10;  title?: string;&#10;  dataAttribute?: string;&#10;  className?: string;&#10;}&#10;&#10;function ToolbarButton(props: ToolbarButtonProps): JSX.Element {&#10;  const className = `toolbarButton ${props.className ?? ''}`;&#10;  const additionalProps = props.dataAttribute != null ? { [props.dataAttribute]: true } : {};&#10;  &#10;  return (&#10;    &lt;Toolbar.Button &#10;      className={className}&#10;      onClick={props.onClick}&#10;      title={props.title}&#10;      {...additionalProps}&#10;    &gt;&#10;      {props.children}&#10;    &lt;/Toolbar.Button&gt;&#10;  );&#10;}&#10;&#10;function TextFormatToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const getIcon = (format: TextFormatType): JSX.Element | null =&gt; {&#10;    switch (format) {&#10;      case 'bold':&#10;        return &lt;FontBoldIcon /&gt;;&#10;      case 'italic':&#10;        return &lt;FontItalicIcon /&gt;;&#10;      case 'strikethrough':&#10;        return &lt;StrikethroughIcon /&gt;;&#10;      case 'underline':&#10;        return &lt;UnderlineIcon /&gt;;&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;  &#10;  const getTitle = (format: TextFormatType): string =&gt; {&#10;    switch (format) {&#10;      case 'bold':&#10;        return 'Kalın (Ctrl+B)';&#10;      case 'italic':&#10;        return 'İtalik (Ctrl+I)';&#10;      case 'underline':&#10;        return 'Alt çizgi (Ctrl+U)';&#10;      case 'strikethrough':&#10;        return 'Üstü çizili';&#10;      default:&#10;        return '';&#10;    }&#10;  };&#10;  &#10;  const onClick = (format: TextFormatType): void =&gt; {&#10;    editor.update(() =&gt; {&#10;      const selection = $getSelection();&#10;      if ($isRangeSelection(selection)) {&#10;        selection.formatText(format);&#10;      }&#10;    });&#10;  };&#10;  &#10;  const supportedTextFormats: TextFormatType[] = ['bold', 'italic', 'underline', 'strikethrough'];&#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      {supportedTextFormats.map((format) =&gt; (&#10;        &lt;ToolbarButton&#10;          key={format}&#10;          onClick={() =&gt; {&#10;            onClick(format);&#10;          }}&#10;          title={getTitle(format)}&#10;          dataAttribute='data-format'&#10;        &gt;&#10;          {getIcon(format)}&#10;        &lt;/ToolbarButton&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;type HeadingTag = 'h1' | 'h2' | 'h3';&#10;function HeadingToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const headingTags: HeadingTag[] = ['h1', 'h2', 'h3'];&#10;  &#10;  const getTitle = (tag: HeadingTag): string =&gt; {&#10;    switch (tag) {&#10;      case 'h1':&#10;        return 'Başlık 1';&#10;      case 'h2':&#10;        return 'Başlık 2';&#10;      case 'h3':&#10;        return 'Başlık 3';&#10;      default:&#10;        return '';&#10;    }&#10;  };&#10;  &#10;  const onClick = (tag: HeadingTag): void =&gt; {&#10;    editor.update(() =&gt; {&#10;      const selection = $getSelection();&#10;      if ($isRangeSelection(selection)) {&#10;        $setBlocksType_experimental(selection, () =&gt; $createHeadingNode(tag));&#10;      }&#10;    });&#10;  };&#10;  &#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      {headingTags.map((tag) =&gt; (&#10;        &lt;ToolbarButton&#10;          onClick={() =&gt; {&#10;            onClick(tag);&#10;          }}&#10;          key={tag}&#10;          title={getTitle(tag)}&#10;          dataAttribute=&quot;data-heading&quot;&#10;        &gt;&#10;          {tag.toUpperCase()}&#10;        &lt;/ToolbarButton&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function ListToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const onClick = (tag: 'ol' | 'ul'): void =&gt; {&#10;    if (tag === 'ol') {&#10;      editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined);&#10;      return;&#10;    }&#10;    editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined);&#10;  };&#10;  &#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      &lt;ToolbarButton&#10;        onClick={() =&gt; {&#10;          onClick('ol');&#10;        }}&#10;        title=&quot;Numaralı liste&quot;&#10;        dataAttribute=&quot;data-list&quot;&#10;      &gt;&#10;        &lt;OrderedListIcon /&gt;&#10;      &lt;/ToolbarButton&gt;&#10;      &lt;ToolbarButton&#10;        onClick={() =&gt; {&#10;          onClick('ul');&#10;        }}&#10;        title=&quot;Madde işaretli liste&quot;&#10;        dataAttribute=&quot;data-list&quot;&#10;      &gt;&#10;        &lt;UnorderedListIcon /&gt;&#10;      &lt;/ToolbarButton&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function BannerToolbarPlugin(): JSX.Element {&#10;  const [editor] = useLexicalComposerContext();&#10;  const onClick = (): void =&gt; {&#10;    editor.dispatchCommand(INSERT_BANNER_COMMAND, undefined);&#10;  };&#10;  &#10;  return (&#10;    &lt;div className=&quot;toolbarGroup&quot;&gt;&#10;      &lt;ToolbarButton &#10;        onClick={onClick}&#10;        title=&quot;Banner ekle&quot;&#10;        dataAttribute=&quot;data-banner&quot;&#10;      &gt;&#10;        &lt;PlusCircledIcon /&gt;&#10;        Banner&#10;      &lt;/ToolbarButton&gt;&#10;      &lt;BannerColorPickerPlugin /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export function ToolbarPlugin(): JSX.Element {&#10;  return (&#10;    &lt;Toolbar.Root className=&quot;toolbarRoot&quot;&gt;&#10;      &lt;TextFormatToolbarPlugin /&gt;&#10;      &lt;HeadingToolbarPlugin /&gt;&#10;      &lt;ListToolbarPlugin /&gt;&#10;      &lt;BannerToolbarPlugin /&gt;&#10;    &lt;/Toolbar.Root&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/glyf-toolbar/styles.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/glyf-toolbar/styles.css" />
              <option name="originalContent" value="button {&#10;    all: unset;&#10;}&#10;&#10;/* Microsoft Word benzeri toolbar tasarımı - global theme ile uyumlu */&#10;.toolbarRoot {&#10;    display: flex;&#10;    align-items: center;&#10;    padding: 8px 16px;&#10;    background: var(--ms-gray-10);&#10;    border-bottom: 1px solid var(--ms-gray-40);&#10;    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#10;    gap: 4px;&#10;    flex-wrap: wrap;&#10;    font-family: inherit; /* Global font'u kullan */&#10;}&#10;&#10;.toolbarButton {&#10;    display: inline-flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    min-width: 32px;&#10;    height: 32px;&#10;    padding: 6px 8px;&#10;    border-radius: 4px;&#10;    font-size: 11px;&#10;    font-weight: 400;&#10;    color: var(--ms-gray-110);&#10;    background: transparent;&#10;    border: 1px solid transparent;&#10;    cursor: pointer;&#10;    transition: all 0.1s ease-in-out;&#10;    white-space: nowrap;&#10;    gap: 4px;&#10;}&#10;&#10;.toolbarButton:hover {&#10;    background: var(--ms-gray-30);&#10;    border-color: var(--ms-gray-40);&#10;    color: var(--ms-gray-120);&#10;}&#10;&#10;.toolbarButton:active {&#10;    background: var(--ms-gray-40);&#10;    border-color: var(--ms-gray-50);&#10;    transform: translateY(0.5px);&#10;}&#10;&#10;.toolbarButton:focus {&#10;    outline: 2px solid var(--ms-blue);&#10;    outline-offset: 1px;&#10;}&#10;&#10;/* Format butonları için özel stiller - theme ile uyumlu */&#10;.toolbarButton[data-format=&quot;bold&quot;] {&#10;    font-weight: 600;&#10;}&#10;&#10;.toolbarButton[data-format=&quot;italic&quot;] {&#10;    font-style: italic;&#10;}&#10;&#10;.toolbarButton[data-format=&quot;underline&quot;] {&#10;    text-decoration: underline;&#10;}&#10;&#10;.toolbarButton[data-format=&quot;strikethrough&quot;] {&#10;    text-decoration: line-through;&#10;}&#10;&#10;/* Heading butonları - theme ile uyumlu */&#10;.toolbarButton[data-heading] {&#10;    min-width: 40px;&#10;    font-weight: 600;&#10;    background: white;&#10;    border: 1px solid var(--ms-gray-50);&#10;    color: var(--ms-blue);&#10;}&#10;&#10;.toolbarButton[data-heading]:hover {&#10;    background: var(--ms-gray-10);&#10;    border-color: var(--ms-gray-60);&#10;    color: var(--ms-blue-hover);&#10;}&#10;&#10;.toolbarButton[data-heading]:active {&#10;    background: var(--ms-gray-20);&#10;    color: var(--ms-blue-active);&#10;}&#10;&#10;/* Banner butonu - theme ile uyumlu */&#10;.toolbarButton[data-banner] {&#10;    background: var(--ms-blue);&#10;    color: white;&#10;    font-weight: 500;&#10;    padding: 6px 12px;&#10;    border: 1px solid var(--ms-blue);&#10;}&#10;&#10;.toolbarButton[data-banner]:hover {&#10;    background: var(--ms-blue-hover);&#10;    border-color: var(--ms-blue-hover);&#10;}&#10;&#10;.toolbarButton[data-banner]:active {&#10;    background: var(--ms-blue-active);&#10;    border-color: var(--ms-blue-active);&#10;}&#10;&#10;/* List butonları - theme ile uyumlu */&#10;.toolbarButton[data-list] {&#10;    background: white;&#10;    border: 1px solid var(--ms-gray-50);&#10;    color: var(--ms-gray-110);&#10;}&#10;&#10;.toolbarButton[data-list]:hover {&#10;    background: var(--ms-gray-10);&#10;    border-color: var(--ms-gray-60);&#10;}&#10;&#10;.toolbarButton[data-list]:active {&#10;    background: var(--ms-gray-20);&#10;}&#10;&#10;/* Toolbar grupları arasında ayırıcı - theme ile uyumlu */&#10;.toolbarGroup {&#10;    display: flex;&#10;    gap: 2px;&#10;    margin-right: 8px;&#10;    padding-right: 8px;&#10;    border-right: 1px solid var(--ms-gray-40);&#10;}&#10;&#10;.toolbarGroup:last-child {&#10;    border-right: none;&#10;    margin-right: 0;&#10;    padding-right: 0;&#10;}&#10;&#10;/* İkon boyutları */&#10;.toolbarButton svg {&#10;    width: 16px;&#10;    height: 16px;&#10;    color: inherit;&#10;}&#10;&#10;/* Active state for toggle buttons */&#10;.toolbarButton[aria-pressed=&quot;true&quot;] {&#10;    background: var(--ms-blue);&#10;    color: white;&#10;    border-color: var(--ms-blue);&#10;}&#10;&#10;.toolbarButton[aria-pressed=&quot;true&quot;]:hover {&#10;    background: var(--ms-blue-hover);&#10;    border-color: var(--ms-blue-hover);&#10;}&#10;&#10;/* Responsive tasarım - App.css breakpoints ile uyumlu */&#10;@media (max-width: 1200px) {&#10;    .toolbarRoot {&#10;        padding: 6px 14px;&#10;        gap: 3px;&#10;    }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;    .toolbarRoot {&#10;        padding: 6px 12px;&#10;        gap: 2px;&#10;        flex-wrap: wrap;&#10;    }&#10;&#10;    .toolbarButton {&#10;        min-width: 28px;&#10;        height: 28px;&#10;        padding: 4px 6px;&#10;        font-size: 10px;&#10;    }&#10;&#10;    .toolbarButton svg {&#10;        width: 14px;&#10;        height: 14px;&#10;    }&#10;&#10;    .toolbarGroup {&#10;        margin-right: 6px;&#10;        padding-right: 6px;&#10;    }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;    .toolbarRoot {&#10;        padding: 4px 8px;&#10;        gap: 1px;&#10;    }&#10;&#10;    .toolbarButton {&#10;        min-width: 24px;&#10;        height: 24px;&#10;        padding: 2px 4px;&#10;        font-size: 9px;&#10;    }&#10;&#10;    .toolbarButton svg {&#10;        width: 12px;&#10;        height: 12px;&#10;    }&#10;&#10;    .toolbarGroup {&#10;        margin-right: 4px;&#10;        padding-right: 4px;&#10;    }&#10;}&#10;&#10;/* Tooltip stili - theme ile uyumlu */&#10;.toolbarButton[title]:hover::after {&#10;    content: attr(title);&#10;    position: absolute;&#10;    bottom: -32px;&#10;    left: 50%;&#10;    transform: translateX(-50%);&#10;    background: var(--ms-gray-120);&#10;    color: white;&#10;    padding: 4px 8px;&#10;    border-radius: 4px;&#10;    font-size: 11px;&#10;    white-space: nowrap;&#10;    z-index: 1000;&#10;    opacity: 0;&#10;    animation: fadeIn 0.2s ease-in-out forwards;&#10;    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;@keyframes fadeIn {&#10;    to {&#10;        opacity: 1;&#10;    }&#10;}&#10;&#10;/* High contrast mode support */&#10;@media (prefers-contrast: high) {&#10;    .toolbarButton {&#10;        border: 2px solid var(--ms-gray-60);&#10;    }&#10;&#10;    .toolbarButton:hover {&#10;        border-color: var(--ms-gray-120);&#10;    }&#10;&#10;    .toolbarButton:focus {&#10;        outline: 3px solid var(--ms-blue);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="button {&#10;    all: unset;&#10;}&#10;&#10;/* Sade Word benzeri toolbar tasarımı */&#10;.toolbarRoot {&#10;    display: flex;&#10;    align-items: center;&#10;    padding: 8px 16px;&#10;    background: #fafafa;&#10;    border-bottom: 1px solid #e0e0e0;&#10;    gap: 6px;&#10;    font-family: 'Segoe UI', system-ui, sans-serif;&#10;    border-radius: 2px 2px 0 0;&#10;}&#10;&#10;.toolbarButton {&#10;    display: inline-flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    min-width: 30px;&#10;    height: 30px;&#10;    padding: 6px 8px;&#10;    border-radius: 3px;&#10;    font-size: 11px;&#10;    font-weight: 400;&#10;    color: #333;&#10;    background: transparent;&#10;    border: 1px solid transparent;&#10;    cursor: pointer;&#10;    transition: background-color 0.1s ease;&#10;    gap: 4px;&#10;}&#10;&#10;.toolbarButton:hover {&#10;    background: #f0f0f0;&#10;    border-color: #d0d0d0;&#10;}&#10;&#10;.toolbarButton:active {&#10;    background: #e8e8e8;&#10;}&#10;&#10;.toolbarButton:focus {&#10;    outline: 2px solid #0078d4;&#10;    outline-offset: 1px;&#10;}&#10;&#10;/* Format butonları */&#10;.toolbarButton[data-format=&quot;bold&quot;] {&#10;    font-weight: 600;&#10;}&#10;&#10;.toolbarButton[data-format=&quot;italic&quot;] {&#10;    font-style: italic;&#10;}&#10;&#10;.toolbarButton[data-format=&quot;underline&quot;] {&#10;    text-decoration: underline;&#10;}&#10;&#10;.toolbarButton[data-format=&quot;strikethrough&quot;] {&#10;    text-decoration: line-through;&#10;}&#10;&#10;/* Başlık butonları - sade stil */&#10;.toolbarButton[data-heading] {&#10;    min-width: 35px;&#10;    font-weight: 600;&#10;    background: white;&#10;    border: 1px solid #d0d0d0;&#10;    color: #2F5496;&#10;}&#10;&#10;.toolbarButton[data-heading]:hover {&#10;    background: #f5f5f5;&#10;    border-color: #b0b0b0;&#10;}&#10;&#10;/* Banner butonu - minimal mavi */&#10;.toolbarButton[data-banner] {&#10;    background: #0078d4;&#10;    color: white;&#10;    font-weight: 500;&#10;    padding: 6px 12px;&#10;    border: 1px solid #0078d4;&#10;}&#10;&#10;.toolbarButton[data-banner]:hover {&#10;    background: #106ebe;&#10;}&#10;&#10;/* Liste butonları */&#10;.toolbarButton[data-list] {&#10;    background: white;&#10;    border: 1px solid #d0d0d0;&#10;}&#10;&#10;.toolbarButton[data-list]:hover {&#10;    background: #f5f5f5;&#10;    border-color: #b0b0b0;&#10;}&#10;&#10;/* Toolbar grupları - basit ayırıcı */&#10;.toolbarGroup {&#10;    display: flex;&#10;    gap: 2px;&#10;    margin-right: 12px;&#10;    padding-right: 12px;&#10;    border-right: 1px solid #e0e0e0;&#10;}&#10;&#10;.toolbarGroup:last-child {&#10;    border-right: none;&#10;    margin-right: 0;&#10;    padding-right: 0;&#10;}&#10;&#10;/* İkonlar */&#10;.toolbarButton svg {&#10;    width: 16px;&#10;    height: 16px;&#10;}&#10;&#10;/* Tooltip - basit */&#10;.toolbarButton[title]:hover::after {&#10;    content: attr(title);&#10;    position: absolute;&#10;    bottom: -28px;&#10;    left: 50%;&#10;    transform: translateX(-50%);&#10;    background: #333;&#10;    color: white;&#10;    padding: 4px 8px;&#10;    border-radius: 3px;&#10;    font-size: 11px;&#10;    white-space: nowrap;&#10;    z-index: 1000;&#10;}&#10;&#10;/* Responsive - mobil için */&#10;@media (max-width: 768px) {&#10;    .toolbarRoot {&#10;        padding: 6px 12px;&#10;        gap: 4px;&#10;    }&#10;    &#10;    .toolbarButton {&#10;        min-width: 28px;&#10;        height: 28px;&#10;        padding: 4px 6px;&#10;        font-size: 10px;&#10;    }&#10;    &#10;    .toolbarButton svg {&#10;        width: 14px;&#10;        height: 14px;&#10;    }&#10;    &#10;    .toolbarGroup {&#10;        margin-right: 8px;&#10;        padding-right: 8px;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/playground/App.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/playground/App.css" />
              <option name="originalContent" value="#root {&#10;  width: 100%;&#10;  margin: 0 auto;&#10;  padding: 2rem;&#10;}&#10;&#10;.App {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;}&#10;&#10;.editorHeading {&#10;  text-align: center;&#10;}&#10;&#10;.editorWrapper {&#10;  position: relative;&#10;  width: 80%;&#10;  min-width: 400px;&#10;  max-width: 1200px;&#10;}&#10;" />
              <option name="updatedContent" value="/* Microsoft Word benzeri uygulama container */&#10;#root {&#10;  width: 100%;&#10;  margin: 0;&#10;  padding: 0;&#10;  min-height: 100vh;&#10;  background: var(--ms-gray-20);&#10;}&#10;&#10;.App {&#10;  display: flex;&#10;  flex-direction: column;&#10;  min-height: 100vh;&#10;  background: var(--ms-gray-20);&#10;}&#10;&#10;/* Word benzeri başlık alanı */&#10;.editorHeading {&#10;  background: linear-gradient(135deg, var(--ms-blue) 0%, var(--ms-blue-hover) 100%);&#10;  color: white;&#10;  margin: 0;&#10;  padding: 24px 40px;&#10;  font-size: 28px;&#10;  font-weight: 300;&#10;  text-align: left;&#10;  letter-spacing: -0.5px;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  border-bottom: 1px solid var(--ms-blue-active);&#10;  position: relative;&#10;}&#10;&#10;.editorHeading::after {&#10;  content: '';&#10;  position: absolute;&#10;  bottom: 0;&#10;  left: 0;&#10;  right: 0;&#10;  height: 2px;&#10;  background: linear-gradient(90deg, &#10;    rgba(255, 255, 255, 0.3) 0%, &#10;    rgba(255, 255, 255, 0.1) 50%, &#10;    rgba(255, 255, 255, 0.3) 100%);&#10;}&#10;&#10;/* Ana editör wrapper alanı */&#10;.editorWrapper {&#10;  flex: 1;&#10;  display: flex;&#10;  justify-content: center;&#10;  padding: 0;&#10;  background: var(--ms-gray-20);&#10;  min-height: calc(100vh - 100px);&#10;  width: 100%;&#10;  max-width: none;&#10;  position: relative;&#10;}&#10;&#10;/* Word benzeri sidebar/panel tasarımı (gelecekte kullanım için) */&#10;.editorSidebar {&#10;  width: 280px;&#10;  background: var(--ms-gray-10);&#10;  border-right: 1px solid var(--ms-gray-40);&#10;  padding: 16px;&#10;  display: none; /* Şimdilik gizli */&#10;}&#10;&#10;/* Status bar - Word benzeri alt çubuk */&#10;.editorStatusBar {&#10;  background: var(--ms-gray-10);&#10;  border-top: 1px solid var(--ms-gray-40);&#10;  padding: 8px 16px;&#10;  font-size: 11px;&#10;  color: var(--ms-gray-90);&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  height: 32px;&#10;}&#10;&#10;.statusBarLeft,&#10;.statusBarRight {&#10;  display: flex;&#10;  gap: 16px;&#10;  align-items: center;&#10;}&#10;&#10;/* Responsive tasarım */&#10;@media (max-width: 1200px) {&#10;  .editorHeading {&#10;    padding: 20px 24px;&#10;    font-size: 24px;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .editorHeading {&#10;    padding: 16px 16px;&#10;    font-size: 20px;&#10;    text-align: center;&#10;  }&#10;  &#10;  .editorWrapper {&#10;    padding: 0;&#10;    min-height: calc(100vh - 80px);&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .editorHeading {&#10;    padding: 12px 12px;&#10;    font-size: 18px;&#10;  }&#10;}&#10;&#10;/* Loading state */&#10;.editorLoading {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  height: 200px;&#10;  color: var(--ms-gray-90);&#10;  font-size: 14px;&#10;}&#10;&#10;/* Error state */&#10;.editorError {&#10;  background: #fef2f2;&#10;  border: 1px solid #fecaca;&#10;  color: #991b1b;&#10;  padding: 16px;&#10;  margin: 16px;&#10;  border-radius: 8px;&#10;  font-size: 14px;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/playground/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/playground/App.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import './App.css';&#10;import { GlyfEditor } from 'src/components';&#10;&#10;function App(): JSX.Element {&#10;  const [wordCount, setWordCount] = React.useState(0);&#10;  const [isLoading, setIsLoading] = React.useState(true);&#10;&#10;  React.useEffect(() =&gt; {&#10;    // Simüle loading sürecini&#10;    const timer = setTimeout(() =&gt; {&#10;      setIsLoading(false);&#10;    }, 500);&#10;    return () =&gt; {&#10;      clearTimeout(timer);&#10;    };&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;App&quot;&gt;&#10;        &lt;div className=&quot;editorLoading&quot;&gt;&#10;          Editör yükleniyor...&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;App&quot;&gt;&#10;      &lt;header&gt;&#10;        &lt;h1 className=&quot;editorHeading&quot;&gt;Glyf Editor - Microsoft Word Benzeri Deneyim&lt;/h1&gt;&#10;      &lt;/header&gt;&#10;&#10;      &lt;main className=&quot;editorWrapper&quot;&gt;&#10;        &lt;GlyfEditor /&gt;&#10;      &lt;/main&gt;&#10;&#10;      &lt;footer className=&quot;editorStatusBar&quot;&gt;&#10;        &lt;div className=&quot;statusBarLeft&quot;&gt;&#10;          &lt;span&gt;Sayfa 1 / 1&lt;/span&gt;&#10;          &lt;span&gt;Kelime: {wordCount}&lt;/span&gt;&#10;          &lt;span&gt;Karakter: {wordCount * 5}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;statusBarRight&quot;&gt;&#10;          &lt;span&gt;Türkçe (Türkiye)&lt;/span&gt;&#10;          &lt;span&gt;100%&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/footer&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import './App.css';&#10;import { GlyfEditor } from 'src/components';&#10;&#10;function App(): JSX.Element {&#10;  const [wordCount, setWordCount] = React.useState(0);&#10;  const [charCount, setCharCount] = React.useState(0);&#10;  const [isLoading, setIsLoading] = React.useState(true);&#10;&#10;  React.useEffect(() =&gt; {&#10;    // Simüle loading sürecini&#10;    const timer = setTimeout(() =&gt; {&#10;      setIsLoading(false);&#10;    }, 500);&#10;    return () =&gt; {&#10;      clearTimeout(timer);&#10;    };&#10;  }, []);&#10;&#10;  const handleWordCountChange = React.useCallback((words: number, chars: number) =&gt; {&#10;    setWordCount(words);&#10;    setCharCount(chars);&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;App&quot;&gt;&#10;        &lt;div className=&quot;editorLoading&quot;&gt;&#10;          Editör yükleniyor...&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;App&quot;&gt;&#10;      &lt;header&gt;&#10;        &lt;h1 className=&quot;editorHeading&quot;&gt;Glyf Editor - Microsoft Word Benzeri Deneyim&lt;/h1&gt;&#10;      &lt;/header&gt;&#10;      &#10;      &lt;main className=&quot;editorWrapper&quot;&gt;&#10;        &lt;GlyfEditor onWordCountChange={handleWordCountChange} /&gt;&#10;      &lt;/main&gt;&#10;      &#10;      &lt;footer className=&quot;editorStatusBar&quot;&gt;&#10;        &lt;div className=&quot;statusBarLeft&quot;&gt;&#10;          &lt;span&gt;Sayfa 1 / 1&lt;/span&gt;&#10;          &lt;span&gt;Kelime: {wordCount}&lt;/span&gt;&#10;          &lt;span&gt;Karakter: {charCount}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;statusBarRight&quot;&gt;&#10;          &lt;span&gt;Türkçe (Türkiye)&lt;/span&gt;&#10;          &lt;span&gt;100%&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/footer&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/playground/index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/playground/index.css" />
              <option name="originalContent" value=":root {&#10;  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;&#10;  color: rgba(255, 255, 255, 0.87);&#10;  background-color: #242424;&#10;  text-rendering: optimizeLegibility;&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  -webkit-text-size-adjust: 100%;&#10;}&#10;&#10;body {&#10;  margin: 0;&#10;  display: flex;&#10;  place-items: center;&#10;  min-width: 320px;&#10;  min-height: 100vh;&#10;}&#10;&#10;h1 {&#10;  font-size: 3.2em;&#10;  line-height: 1.1;&#10;}&#10;" />
              <option name="updatedContent" value="/* Microsoft Word benzeri global reset ve temel stiller */&#10;:root {&#10;  font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, sans-serif;&#10;  color: #323130;&#10;  background-color: #f3f2f1;&#10;  text-rendering: optimizeLegibility;&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  -webkit-text-size-adjust: 100%;&#10;  &#10;  /* Microsoft Office renk paleti */&#10;  --ms-blue: #0078d4;&#10;  --ms-blue-hover: #106ebe;&#10;  --ms-blue-active: #005a9e;&#10;  --ms-gray-10: #faf9f8;&#10;  --ms-gray-20: #f3f2f1;&#10;  --ms-gray-30: #edebe9;&#10;  --ms-gray-40: #e1dfdd;&#10;  --ms-gray-50: #d2d0ce;&#10;  --ms-gray-60: #c8c6c4;&#10;  --ms-gray-70: #a19f9d;&#10;  --ms-gray-80: #797775;&#10;  --ms-gray-90: #605e5c;&#10;  --ms-gray-100: #323130;&#10;  --ms-gray-110: #201f1e;&#10;  --ms-gray-120: #11100f;&#10;}&#10;&#10;* {&#10;  box-sizing: border-box;&#10;}&#10;&#10;body {&#10;  margin: 0;&#10;  padding: 0;&#10;  background: var(--ms-gray-20);&#10;  color: var(--ms-gray-100);&#10;  min-width: 320px;&#10;  min-height: 100vh;&#10;  overflow-x: auto;&#10;}&#10;&#10;/* Scrollbar styling - Microsoft benzeri */&#10;::-webkit-scrollbar {&#10;  width: 14px;&#10;  height: 14px;&#10;}&#10;&#10;::-webkit-scrollbar-track {&#10;  background: var(--ms-gray-10);&#10;}&#10;&#10;::-webkit-scrollbar-thumb {&#10;  background: var(--ms-gray-60);&#10;  border-radius: 7px;&#10;  border: 2px solid var(--ms-gray-10);&#10;}&#10;&#10;::-webkit-scrollbar-thumb:hover {&#10;  background: var(--ms-gray-70);&#10;}&#10;&#10;::-webkit-scrollbar-corner {&#10;  background: var(--ms-gray-10);&#10;}&#10;&#10;/* Typography reset */&#10;h1, h2, h3, h4, h5, h6 {&#10;  margin: 0;&#10;  font-weight: 600;&#10;  color: var(--ms-gray-110);&#10;}&#10;&#10;p {&#10;  margin: 0;&#10;  line-height: 1.4;&#10;}&#10;&#10;/* Selection styling */&#10;::selection {&#10;  background-color: var(--ms-blue);&#10;  color: white;&#10;}&#10;&#10;::-moz-selection {&#10;  background-color: var(--ms-blue);&#10;  color: white;&#10;}&#10;&#10;h1 {&#10;  font-size: 3.2em;&#10;  line-height: 1.1;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>